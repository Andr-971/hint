// üî≥ ‚Å°‚Å¢‚Å£‚Å£–¢–ò–ü–ò–ó–ê–¶–ò–Ø C –°–£–ñ–ê–ï–ú –¢–ò–ü
{
    // üîπ ‚Å°‚Å£‚Å¢‚Å°‚Å£‚Å¢‚Å¢–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª–∏—Ç–µ—Ä–∞–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ in‚Å°
    {
		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
		interface Admin {
			name: string;
			age: number;
			role: "admin"; // —Å—Ç—Ä–æ–∫–∞ "admin" –∫–∞–∫ –ª–∏—Ç–µ—Ä–∞–ª—å–Ω—ã–π —Ç–∏–ø
		}
		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		interface User {
			name: string;
			age: number;
			occupation: string; // —Ä–æ–¥ –∑–∞–Ω—è—Ç–∏–π (–ª—é–±–∞—è —Å—Ç—Ä–æ–∫–∞)
		}
		// –°–æ–∑–¥–∞–µ–º —Ç–∏–ø Person, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ Admin, –ª–∏–±–æ User
		type Person = Admin | User;
		// –ú–∞—Å—Å–∏–≤ persons, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –æ–±—ä–µ–∫—Ç—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—É Person
		const persons: Person[] = [
			{
				name: "–ò–≤–∞–Ω",
				age: 8,
				role: "admin", // —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É Admin
			},
			{
				name: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä",
				age: 16,
				occupation: "user", // —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É User
			},
			{
				name: "–ú–∞–∫—Å–∏–º",
				age: 19,
				occupation: "user", // —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É User
			},
			{
				name: "–ê–Ω–¥—Ä–µ–π",
				age: 55,
				role: "admin", // —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É Admin
			},
		];
		// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ
		function logPerson(person: Person) {
			let additionalInformation: string;
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ role (—Å—É–∂–∞–µ–º —Ç–∏–ø –¥–æ Admin)
			if ("role" in person) {
				additionalInformation = person.role;
			}
			// –ò–Ω–∞—á–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ User
			else {
				additionalInformation = person.occupation;
			}
			console.log(` - ${person.name}, ${person.age}, ${additionalInformation}`);
		}
	}
}
// üî≥ ‚Å°‚Å¢‚Å£‚Å£–ü–†–û–õ–£–ß–ï–ù–ò–ï –î–í–£–• –¢–ò–ü–û–í –î–ê–ù–ù–´–• –òX –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –ò –°–û–ó–î–ê–ù–ò–ï –ö–õ–Æ–ß–ê –í –í–ò–î–ï –î–ê–¢–´‚Å°
{
    // üîπ ‚Å°‚Å£‚Å¢‚Å¢–ó–∞–¥–∞—á–∞ 1‚Å°
    {
		interface DateTimeInterface {
			settingTime(date: Date, format?: number[]): Date;
		}
		const DateTime: DateTimeInterface = {
			settingTime(date, ar = [0, 0, 0, 0]) {
				const result = new Date(date);
				result.setHours(ar[0], ar[1], ar[2], ar[3]);
				return result;
			},
		};
		// –≠–Ω–¥–ø–æ–∏–Ω–¥ GET "/rooms" –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç IRoom[]
		// –≠–Ω–¥–ø–æ–∏–Ω–¥ GET "/messages" –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç IMessage[]
		// –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–Ω–∞—Ç—ã –∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–Ω—è–º
		// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—ä–µ–∫—Ç–∞ "–ö–æ–º–Ω–∞—Ç–∞"
		interface IRoom {
			id: number; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–Ω–∞—Ç—ã
			name: string; // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
			type: string; // –¢–∏–ø –∫–æ–º–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "private", "public")
		}
		// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—ä–µ–∫—Ç–∞ "–°–æ–æ–±—â–µ–Ω–∏–µ"
		interface IMessage {
			roomId: IRoom["id"]; // –°—Å—ã–ª–∫–∞ –Ω–∞ ID –∫–æ–º–Ω–∞—Ç—ã (—Ç–∏–ø number)
			id: number; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
			text: string; // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
			ts: Date; // –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
		}
		// –ù–æ–≤—ã–π —Ç–∏–ø –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		type ProcessedMessage = Omit<IMessage, "roomId"> & {
			// Omit –£–¥–∞–ª—è–µ—Ç –ø–æ–ª–µ roomId –∏–∑ IMessage
			roomName: IRoom["name"]; // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–º–Ω–∞—Ç—ã (—Ç–∏–ø string)
		};
		// –¢–∏–ø –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: Record
		type ProcessData = Record<string, ProcessedMessage[]>;
		// Record - ‚Å¢–°–æ–∑–¥–∞—ë—Ç —Ç–∏–ø —Å –∫–ª—é—á–∞–º–∏ string –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ ProcessedMessage[]
		// –ü—Ä–∏ —ç—Ç–æ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∫–ª—é—á - ISO –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –¥–ª—è ("2022-06-23T00:00:00")
		// –ü—Ä–∏–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:
		const exp = {
			"2022-03-23T00:00:00": [
				{
					roomName: "room name", // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ rooms
					id: 1,
					text: "–°–æ–ª–Ω—Ü–µ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–µ–∑–¥–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–ø–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –æ—à–∏–±–∫—É",
					ts: "thu Mar 23 2023 12:15:15 GMT+0200 (–í–æ—Å—Ç–æ—á–Ω–∞—è –µ–≤—Ä–æ–ø–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è)",
				},
			],
		};
		async function processMessages() {
			// 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
			const rooms: IRoom[] = await fetch("http://localhost:3002/rooms").then((res) =>
				res.json(),
			);
			const messages: IMessage[] = await fetch("http://localhost:3002/messages").then((res) =>
				res.json(),
			);
			// 2. –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É(–û–±—ä–µ–∫—Ç) –∫–æ–º–Ω–∞—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø–æ ID
			const roomMap = new Map<IRoom["id"], IRoom["name"]>();
			let key = [];
			rooms.forEach((room) => {
				roomMap.set(room.id, room.name);
				key.push(room.id); // –ö–ª—é—á–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–Ω–∞—Ç–∞–º
			});
			const processingMessages = []; // –ú—É—Ç–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			const dataKey = [];
			messages.forEach((item, i) => {
				dataKey.push(item.ts);
				processingMessages.push({
					roomName: roomMap.get(key[i]),
					id: item.id,
					text: item.text,
					ts: item.ts,
				});
			});
			// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–∞—Ç—ã –≤ ISO –∏ –Ω–∞—á–∞–ª–æ —Å—É—Ç–æ–∫ —Å –æ–±—Ä–µ–∑–∞–Ω–∏–µ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
			const nowData = (key: string[]): string[] => {
				return key.map((el) =>
					DateTime.settingTime(new Date(el), [-5, 0, 0, 0]).toISOString().slice(0, -5),
				);
			};
			// 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
			let result: ProcessData = {}; // –ò—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
			processingMessages.forEach((msg, i) => {
				result[nowData(dataKey)[i]] = msg; // –ù–æ–≤—ã–π –º—É—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á —Å –Ω–æ–≤—ã–º –º—É—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º
			});
			return result;
		}
		const res = await processMessages();
		console.log(res);
	}
}
// üî≥ ‚Å°‚Å¢‚Å£‚Å£–¢–ò–ü–ò–ó–ê–¶–ò–Ø –§–£–ù–ö–¶–ò–ò –ü–†–ò –ü–û–ú–û–©–ò –î–ñ–ï–ù–ï–†–ò–ö–û–í‚Å°
{
    // üîπ ‚Å°‚Å£‚Å¢‚Å¢–§—É–Ω–∫—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã –æ–±—ä–µ–∫—Ç, –∫–ª—é—á, –≤–µ—Ä–Ω—É—Ç—å –∫–ª—é—á, –æ–±—ä–µ–∫—Ç‚Å°
    {
		interface User {
			name: string;
			age?: number;
		}

		function getObjectProperty<T extends object, K extends keyof T>(target: T, key: K) {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤ –æ–±—ä–µ–∫—Ç–µ (–≤–∫–ª—é—á–∞—è —Ü–µ–ø–æ—á–∫—É –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤)
			if (!(key in target)) {
				// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É —Å –∏–º–µ–Ω–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
				throw new Error(`Property "${String(key)}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ü–µ–ª–µ–≤–æ–º –æ–±—ä–µ–∫—Ç–µ`);
			}

			// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
			return target[key];
		}

		const user = {
			name: "test",
			age: 10,
		};

		getObjectProperty(user, "age");
		// getObjectProperty(user, "wrond"); // –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞
	}
}
// üî≥ 
// üî≥ 
export {};    


{
  // Базовые настройки
  ⁡⁢⁢⁢"compilerOptions"⁡: {
    /* ⁡⁣⁢⁢Базовые параметры⁡ */
    ⁡⁢⁢⁢"incremental"⁡: true, // Включает инкрементальную компиляцию для ускорения последующих сборок
    ⁡⁢⁢⁢"target":⁡ "ES2020", // Указывает версию ECMAScript для выходного кода (ES3, ES5, ES6/ES2015, ES2016, ES2017, ES2018, ES2019, ES2020, ESNext)
    ⁡⁢⁢⁢"module":⁡ "commonjs", // Задает систему модулей для кода (commonjs, amd, es2015, esnext, umd и др.)
    ⁡⁢⁢⁢"lib":⁡ ["ES2020", "DOM"], // Указывает набор библиотечных файлов, включаемых в компиляцию
    ⁡⁢⁢⁢"allowJs":⁡ true, // Разрешает компиляцию файлов JavaScript
    ⁡⁢⁢⁢"checkJs":⁡ true, // Включает проверку типов в файлах JavaScript
    ⁡⁢⁢⁢"jsx":⁡ "preserve", // Управляет обработкой JSX (preserve, react, react-native, react-jsx, react-jsxdev)
    ⁡⁢⁢⁢"declaration":⁡ true, // Генерирует соответствующие файлы .d.ts
    ⁡⁢⁢⁢"declarationMap":⁡ true, // Создает source maps для файлов .d.ts
    ⁡⁢⁢⁢"sourceMap":⁡ true, // Генерирует соответствующие файлы .map
    ⁡⁢⁢⁢"outFile":⁡ "./dist/bundle.js", // Объединяет все файлы в один выходной файл (только для AMD/System)
    ⁡⁢⁢⁢"outDir":⁡ "./dist", // Указывает выходной каталог
    ⁡⁢⁢⁢"rootDir": ⁡"./src", // Указывает корневой каталог исходных файлов
    ⁡⁢⁢⁢"composite":⁡ true, // Включает параметры для проектных ссылок (project references)
    ⁡⁢⁢⁢"tsBuildInfoFile":⁡ "./.tsbuildinfo", // Указывает файл для хранения информации инкрементальной компиляции
    ⁡⁢⁢⁢"removeComments": ⁡false, // Удаляет комментарии из выходных файлов
    ⁡⁢⁢⁢"noEmit":⁡ false, // Не генерирует выходные файлы (только проверка типов)
    ⁡⁢⁢⁢"importHelpers":⁡ true, // Импортирует хелперы из tslib
    ⁡⁢⁢⁢"downlevelIteration":⁡ true, // Обеспечивает полную поддержку итерации в старых версиях JavaScript
    ⁡⁢⁢⁢"isolatedModules":⁡ true, // Гарантирует, что каждый файл может быть скомпилирован независимо
    /* ⁡⁣⁢⁢Строгие проверки типов⁡ */
    ⁡⁢⁢⁢"strict":⁡ true, // Включает все строгие проверки типов
    ⁡⁢⁢⁢"noImplicitAny":⁡ true, // Запрещает неявное использование типа any
    ⁡⁢⁢⁢"strictNullChecks":⁡ true, // Включает строгую проверку null и undefined
    ⁡⁢⁢⁢"strictFunctionTypes":⁡ true, // Строгая проверка типов функций
    ⁡⁢⁢⁢"strictBindCallApply":⁡ true, // Строгая проверка bind, call и apply
    ⁡⁢⁢⁢"strictPropertyInitialization":⁡ true, // Проверка инициализации свойств класса
    ⁡⁢⁢⁢"noImplicitThis":⁡ true, // Запрещает неявное использование this с типом any
    ⁡⁢⁢⁢"alwaysStrict":⁡ true, // Разбирает код в строгом режиме и добавляет "use strict"
    /* ⁡⁣⁢⁢Дополнительные проверки⁡ */
    ⁡⁢⁢⁢"noUnusedLocals":⁡ true, // Ошибка при неиспользуемых локальных переменных
    ⁡⁢⁢⁢"noUnusedParameters":⁡ true, // Ошибка при неиспользуемых параметрах
    ⁡⁢⁢⁢"noImplicitReturns":⁡ true, // Ошибка, если не все пути функции возвращают значение
    ⁡⁢⁢⁢"noFallthroughCasesInSwitch":⁡ true, // Ошибка при fallthrough в switch
    ⁡⁢⁢⁢"noUncheckedIndexedAccess":⁡ true, // Добавляет undefined к индексированным типам (array[0] может быть undefined)
    ⁡⁢⁢⁢"noPropertyAccessFromIndexSignature":⁡ true, // Требует использовать ['key'] для доступа к свойствам с индексной сигнатурой
    /* ⁡⁣⁢⁢Настройки модулей ⁡*/
    ⁡⁢⁢⁢"moduleResolution":⁡ "node", // Стратегия разрешения модулей (node, classic)
    ⁡⁢⁢⁢"baseUrl":⁡ "./", // Базовый каталог для разрешения модулей
    ⁡⁢⁢⁢"paths": ⁡{ // Сопоставления путей для импортов
      ⁡⁢⁢⁢"@components/*":⁡ ["src/components/*"],
      ⁡⁢⁢⁢"@utils/*":⁡ ["src/utils/*"]
    },
    ⁡⁢⁢⁢"rootDirs": ⁡["src", "generated"], // Список корневых каталогов, объединенных виртуально
    ⁡⁢⁢⁢"typeRoots":⁡ [ // Список каталогов с определениями типов
      "./node_modules/@types",
      "./custom_types"
    ],
    ⁡⁢⁢⁢"types":⁡ ["node", "jest"], // Указывает, какие пакеты типов включать
    ⁡⁢⁢⁢"allowSyntheticDefaultImports":⁡ true, // Разрешает синтетические импорты по умолчанию
    ⁡⁢⁢⁢"esModuleInterop":⁡ true, // Включает совместимость с CommonJS/ES модулями
    ⁡⁢⁢⁢"preserveSymlinks":⁡ true, // Не разрешает символические ссылки
    ⁡⁢⁢⁢"allowUmdGlobalAccess":⁡ true, // Разрешает доступ к UMD глобалам из модулей
    /* ⁡⁣⁢⁢Настройки source map ⁡*/
    ⁡⁢⁢⁢"sourceRoot":⁡ "", // Указывает корневой каталог для отладчика
    ⁡⁢⁢⁢"mapRoot":⁡ "", // Указывает каталог для файлов .map
    ⁡⁢⁢⁢"inlineSourceMap":⁡ false, // Встраивает source maps в .js файлы
    ⁡⁢⁢⁢"inlineSources":⁡ false, // Встраивает исходники в source maps
    /* ⁡⁣⁢⁢Экспериментальные настройки ⁡*/
    ⁡⁢⁢⁢"experimentalDecorators":⁡ true, // Включает поддержку декораторов
    ⁡⁢⁢⁢"emitDecoratorMetadata":⁡ true, // Генерирует метаданные для декораторов
    ⁡⁢⁢⁢"useDefineForClassFields":⁡ true, // Использует современный способ определения полей класса
    /* ⁡⁣⁢⁢Дополнительные настройки⁡ */
    "allowUnreachableCode": false, // опция, которая вызывает ошибки для кода, который недоступен, то есть его невозможно выполнить. 
    ⁡⁢⁢⁢"forceConsistentCasingInFileNames":⁡ true, // Обеспечивает согласованность регистра имен файлов
    ⁡⁢⁢⁢"skipLibCheck":⁡ true, // Пропускает проверку типов в файлах .d.ts
    ⁡⁢⁢⁢"resolveJsonModule":⁡ true, // Разрешает импорт JSON файлов
    ⁡⁢⁢⁢"noErrorTruncation":⁡ true, // Не обрезает сообщения об ошибках
    ⁡⁢⁢⁢"preserveConstEnums":⁡ true, // Сохраняет enum в выводе
    ⁡⁢⁢⁢"newLine":⁡ "lf", // Указывает символы конца строки (crlf, lf)
    ⁡⁢⁢⁢"noEmitHelpers":⁡ false, // Не генерирует хелперы (используйте importHelpers)
    ⁡⁢⁢⁢"noEmitOnError":⁡ false, // Не генерирует вывод при ошибках компиляции
    ⁡⁢⁢⁢"noLib":⁡ false, // Не включает стандартную библиотеку
    ⁡⁢⁢⁢"noResolve":⁡ false, // Не разрешает импорты и ссылки
    ⁡⁢⁢⁢"stripInternal":⁡ false, // Не генерирует код с JSDoc аннотацией @internal
    ⁡⁢⁢⁢"disableSizeLimit":⁡ false, // Отключает ограничение на размер кода TypeScript
    ⁡⁢⁢⁢"disableSourceOfProjectReferenceRedirect":⁡ false, // Отключает оптимизацию для проектных ссылок
    ⁡⁢⁢⁢"disableSolutionSearching":⁡ false, // Отключает поиск решения для проектов
    ⁡⁢⁢⁢"disableReferencedProjectLoad":⁡ false // Отключает загрузку ссылочных проектов
  },
  // ⁡⁢⁣⁣Включает файлы для компиляции (поддерживает glob-паттерны)⁡
  ⁡⁢⁢⁢"include": ⁡[
    "src/**/*.ts",
    "src/**/*.tsx",
    "tests/**/*.ts",
    "custom_types/**/*.d.ts"
  ],
  // ⁡⁢⁣⁣Исключает файлы из компиляции⁡
  ⁡⁢⁢⁢"exclude": ⁡[
    "node_modules",
    "**/*.spec.ts",
    "dist"
  ],
  // ⁡⁢⁣⁣Расширенные настройки⁡
  ⁡⁢⁢⁢"extends":⁡ "./configs/base", // Наследование конфигурации из другого файла
  ⁡⁢⁢⁢"files":⁡ [], // Явное указание файлов для компиляции (альтернатива include)
  ⁡⁢⁢⁢"references":⁡ [ // Ссылки на другие проекты TypeScript
    { "path": "../shared" },
    { "path": "../core" }
  ],
  ⁡⁢⁢⁢"compileOnSave":⁡ false, // Автоматическая компиляция при сохранении (устарело)
  ⁡⁢⁢⁢"typeAcquisition":⁡ { // Настройки автоматического получения типов
    ⁡⁢⁢⁢"enable":⁡ true,
    ⁡⁢⁢⁢"include":⁡ ["jquery", "lodash"],
    ⁡⁢⁢⁢"exclude":⁡ ["react"]
  }
}
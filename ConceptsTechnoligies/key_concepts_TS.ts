
// ‚Å°‚Å¢‚Å£‚Å¢TYPE SCRIPT‚Å°
{
	// ‚Å°‚Å£‚Å¢‚Å¢TypeScript‚Å° ‚Å°‚Å£‚Å£‚Å¢‚Äî —ç—Ç–æ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–¥—Å—Ç—Ä–æ–π–∫–æ–π –Ω–∞–¥ JavaScript. –û–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ –Ω–µ–º—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö (—á–∏—Å–ª–∞, —Å—Ç—Ä–æ–∫–∏, –±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ç. –¥.), –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, —Ñ—É–Ω–∫—Ü–∏—è—Ö –∏ –æ–±—ä–µ–∫—Ç–∞—Ö.‚Å°
	// ‚Å°‚Å¢‚Å£‚Å£–ß–ê–°–¢–û –ó–ê–î–ê–í–ê–ï–ú–´–ï –í–û–ü–†–û–°–´ –ù–ê –°–û–ë–ï–°–ï–î–û–í–ê–ù–ò–ò‚Å°
	{ 
		// ‚òëÔ∏è ‚Å°‚Å£‚Å¢‚Å¢–í –ß–ï–ú –†–ê–ó–ù–ò–¶–ê –ú–ï–ñ–î–£ TYPESCRIPT –ò JAVASCRIPT?‚Å°
		{
			// ‚Å°‚Å£‚Å£‚Å¢TypeScript - —ç—Ç–æ –Ω–∞–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ JavaScript, –¥–æ–±–∞–≤–ª—è—é—â–µ–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–∏–ø–∏–∑–∞—Ü–∏—é. –ö–æ–¥ TypeScript –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –≤ JavaScript. –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:‚Å°
			// ‚Å°‚Å£‚Å£‚Å¢-- –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è‚Å°
			// ‚Å°‚Å£‚Å£‚Å¢-- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∏—á ECMAScript‚Å°‚Å£‚Å£‚Å¢(ECMAScript ‚Äî —ç—Ç–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –¥–ª—è —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–∞–∫–∏—Ö –∫–∞–∫ JavaScript, JScript –∏ ActionScript.–û–Ω –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö, –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç –∫–æ–¥ –ø–æ–Ω—è—Ç–Ω—ã–º –∏ –ª–µ–≥–∫–æ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ä–µ–¥–∞—Ö.)‚Å°
			// ‚Å°‚Å£‚Å£‚Å¢-- –õ—É—á—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ IDE‚Å°
			// ‚Å°‚Å£‚Å£‚Å¢-- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –Ω–∞ —ç—Ç–∞–ø–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏‚Å°
		}
		// ‚òëÔ∏è ‚Å°‚Å£‚Å¢‚Å¢–ß–¢–û –¢–ê–ö–û–ï "–£–¢–ò–ù–ê–Ø –¢–ò–ü–ò–ó–ê–¶–ò–Ø" –í TYPESCRIPT?‚Å°
		{
			// ‚Å°‚Å£‚Å£‚Å¢–£—Ç–∏–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è - —ç—Ç–æ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è, —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ—Ç–æ—Ä–æ–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π, –∞ –Ω–µ —è–≤–Ω—ã–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º —Ç–∏–ø–∞. –¢–æ –µ—Å—Ç—å, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã, –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–∞–∫ –¥—Ä—É–≥–æ–π —Ç–∏–ø.‚Å°
			interface Duck {
				quack(): void;
			}
			class MallardDuck implements Duck {
				quack() {
					console.log("Quack!");
				}
			}
			function makeItQuack(duck: Duck) {
				duck.quack();
			}
			const duck = new MallardDuck();
			makeItQuack(duck); // OK
		}
		// ‚òëÔ∏è ‚Å°‚Å£‚Å¢‚Å¢–ö–ê–ö –†–ê–ë–û–¢–ê–Æ–¢ –î–ñ–ï–ù–ï–†–ò–ö–ò –í TYPESCRIPT?‚Å°
		{
			// ‚Å°‚Å£‚Å£‚Å¢–î–∂–µ–Ω–µ—Ä–∏–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–∏–º. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.‚Å°
			function reverse<T>(items: T[]): T[] {
				return items.reverse();
			}
			const numbers = [1, 2, 3];
			const reversedNumbers = reverse<number>(numbers);
			const strings = ["a", "b", "c"];
			const reversedStrings = reverse<string>(strings);
		}
		// ‚òëÔ∏è ‚Å°‚Å£‚Å¢‚Å¢–ß–¢–û –¢–ê–ö–û–ï "TYPE ASSERTION" –ò –ö–ê–ö –ï–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨?‚Å°‚Å°
		{
			// ‚Å°‚Å£‚Å£‚Å¢Type assertion - —ç—Ç–æ —Å–ø–æ—Å–æ–± —Å–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—É, —á—Ç–æ –≤—ã –∑–Ω–∞–µ—Ç–µ –æ —Ç–∏–ø–µ –ª—É—á—à–µ, —á–µ–º –æ–Ω. –≠—Ç–æ –Ω–µ —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö.‚Å°
			// –£–≥–ª–æ–≤—ã–µ —Å–∫–æ–±–∫–∏
			let someValue_: any = "this is a string";
			let strLength_: number = (<string>someValue_).length;
			// as-—Å–∏–Ω—Ç–∞–∫—Å–∏—Å
			let someValue: any = "this is a string";
			let strLength: number = (someValue as string).length;
		}
		// ‚òëÔ∏è ‚Å°‚Å£‚Å¢‚Å¢–ö–ê–ö TYPESCRIPT –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–¢ –ù–ï–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ò NULLABLE –ü–ê–†–ê–ú–ï–¢–†–´?‚Å°‚Å°
		{
			// ‚Å°‚Å£‚Å£‚Å¢TypeScript –ø–æ–∑–≤–æ–ª—è–µ—Ç —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å null/undefined.‚Å°
			function greet(name: string, greeting?: string) {
				// greeting - –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
				console.log(`${greeting || "Hello"}, ${name}`);
			}
			function processing(value: string | null): void {
				// value –º–æ–∂–µ—Ç –±—ã—Ç—å string –∏–ª–∏ null
				if (value !== null) {
					console.log(value.toUpperCase());
				}
			}
		}
		// ‚òëÔ∏è ‚Å°‚Å£‚Å¢‚Å¢–ß–¢–û –¢–ê–ö–û–ï "–î–ï–ö–û–†–ê–¢–û–†–´" –ò –ö–ê–ö –û–ù–ò –†–ê–ë–û–¢–ê–Æ–¢?‚Å°‚Å°
		{
			// ‚Å°‚Å£‚Å£‚Å¢–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã - —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –≤–∏–¥ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ –∫–ª–∞—Å—Å–∞–º, –º–µ—Ç–æ–¥–∞–º, —Å–≤–æ–π—Å—Ç–≤–∞–º –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º. –û–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ñ–æ—Ä–º—É @expression.‚Å°
			function log(target: any, propertyKey: string, descriptor: PropertyDescriptor) {
				const originalMethod = descriptor.value;
				descriptor.value = function (...args: any[]) {
					console.log(`Calling ${propertyKey} with args: ${JSON.stringify(args)}`);
					const result = originalMethod.apply(this, args);
					console.log(`Result: ${result}`);
					return result;
				};
				return descriptor;
			}
			class Calculator {
				// @log
				add(a: number, b: number): number {
					return a + b;
				}
			}
		}
		// ‚òëÔ∏è ‚Å°‚Å£‚Å¢‚Å¢–ö–ê–ö TYPESCRIPT –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢ –ü–ï–†–ï–ì–†–£–ó–ö–£ –§–£–ù–ö–¶–ò–ô?‚Å°
		{
			// ‚Å°‚Å£‚Å£‚Å¢TypeScript –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—ä—è–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞—Ç—É—Ä –¥–ª—è –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å–æ –≤—Å–µ–º–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º–∏.‚Å°
			function add(a: number, b: number): number;
			function add(a: string, b: string): string;
			function add(a: any, b: any): any {
				return a + b;
			}
			add(1, 2); // number
			add("1", "2"); // string
		}
		// ‚òëÔ∏è ‚Å°‚Å£‚Å¢‚Å¢–ß–¢–û –¢–ê–ö–û–ï "–£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –¢–ò–ü–´" (UTILITY TYPES)?‚Å°‚Å°
		{
			// ‚Å°‚Å£‚Å£‚Å¢TypeScript –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤:‚Å°
			interface User {
				id: number;
				name: string;
				age: number;
				email: string;
			}
			// ‚Å°‚Å£‚Å¢‚Å£Partial - –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏‚Å°
			type PartialUser = Partial<User>;
			// ‚Å°‚Å£‚Å¢‚Å£Readonly - –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è‚Å°
			type ReadonlyUser = Readonly<User>;
			// ‚Å°‚Å£‚Å¢‚Å£Pick - –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞‚Å°
			type UserNameAndEmail = Pick<User, "name" | "email">;
			// ‚Å°‚Å£‚Å¢‚Å£Omit - –∏—Å–∫–ª—é—á–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞‚Å°
			type UserWithoutEmail = Omit<User, "email">;
		}
		// ‚òëÔ∏è ‚Å°‚Å£‚Å¢‚Å¢–ö–ê–ö TYPESCRIPT –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–¢ –ú–û–î–£–õ–ò?‚Å°
		{
			// ‚Å°‚Å£‚Å£‚Å¢TypeScript –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–æ–¥—É–ª–∏ ES6, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω (namespaces). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ ES6.‚Å°
			// math.ts
			// export function add(a: number, b: number): number {
			// 	return a + b;
			// }
			// app.ts
			// import { add } from "./math";
			// console.log(add(1, 2));
		}
		// ‚òëÔ∏è ‚Å°‚Å£‚Å¢‚Å¢–ß–¢–û –¢–ê–ö–û–ï "NEVER" –¢–ò–ü –ò –ö–û–ì–î–ê –û–ù –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø?‚Å°
		{
			// ‚Å°‚Å£‚Å£‚Å¢–¢–∏–ø never –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä, —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—Å–µ–≥–¥–∞ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è.‚Å°
			function error(message: string): never {
				throw new Error(message);
			}
			function infiniteLoop(): never {
				while (true) {}
			}
			function assertNever(x: never): never {
				throw new Error("Unexpected object: " + x);
			}
		}
		// ‚òëÔ∏è ‚Å°‚Å£‚Å¢‚Å¢–ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ú–ò–ö–°–ò–ù–´ –í TYPESCRIPT?‚Å°
		{
			// ‚Å°‚Å£‚Å£‚Å¢–ú–∏–∫—Å–∏–Ω—ã - —ç—Ç–æ —Å–ø–æ—Å–æ–± —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.‚Å°
			type Constructor<T = {}> = new (...args: any[]) => T;
			function Timestamped<TBase extends Constructor>(Base: TBase) {
				return class extends Base {
					timestamp = Date.now();
				};
			}
			class User {
				name: string;
				constructor(name: string) {
					this.name = name;
				}
			}
			const TimestampedUser = Timestamped(User);
			const user = new TimestampedUser("John");
			console.log(user.timestamp);
		}
		// ‚òëÔ∏è ‚Å°‚Å£‚Å¢‚Å¢–ö–ê–ö TYPESCRIPT –†–ê–ë–û–¢–ê–ï–¢ –° REACT?‚Å°
		{
			// ‚Å°‚Å£‚Å£‚Å¢TypeScript –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç JSX –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–∏–ø—ã –¥–ª—è React. –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏:‚Å°
			{
				interface Props {
					name: string;
					age?: number;
				}
				// const Greeting: React.FC<Props> = ({ name, age = 18 }) => {
				// 	return <div>Hello, {name}. You are {age} years old.</div>;
				// };
				// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
				// const Counter: React.FC = () => {
				// 	const [count, setCount] = React.useState<number>(0);
				// 	React.useEffect(() => {
				// 		document.title = `Count: ${count}`;
				// 	}, [count]);

				// 	return (
				// 		<button onClick={() => setCount(count + 1)}>
				// 		Clicked {count} times
				// 		</button>
				// 	);
				// };
			}
			// üî≥ ‚Å°‚Å¢‚Å£‚Å£–§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´‚Å°
			{
				// ‚ö™ ‚Å°‚Å£‚Å£‚Å¢React.FC<Props> / React.FunctionComponent<Props>‚Å°
				{
					// interface Props { title: string }
					// const Component: React.FC<Props> = ({ title }) => <div>{title}</div>;
				}
				// ‚ö™ ‚Å°‚Å£‚Å£‚Å¢React.memo<Props>‚Å°
				{
					// const MemoizedComponent = React.memo<Props>(({ text }) => <div>{text}</div>);
				}
			}
			// üî≥ ‚Å°‚Å¢‚Å£‚Å£–•–£–ö–ò‚Å°
			{
				// ‚ö™ ‚Å°‚Å£‚Å£‚Å¢useState<T>(initialState)‚Å°
				{
					// const [state, setState] = useState<string | null>(null);
				}
				// ‚ö™ ‚Å°‚Å£‚Å£‚Å¢useReducer<Reducer, State, Action>‚Å°
				{
					// type Action = { type: 'increment' };
					// const reducer = (state: number, action: Action) => ...;
					// const [state, dispatch] = useReducer<typeof reducer>(reducer, 0);
				}
				// ‚ö™ ‚Å°‚Å£‚Å£‚Å¢useRef<T>(initialValue)‚Å°
				{
					// const inputRef = useRef<HTMLInputElement>(null); // –î–ª—è DOM
					// const valueRef = useRef<number>(0); // –î–ª—è –º—É—Ç–∞–±–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
				}
				// ‚ö™ ‚Å°‚Å£‚Å£‚Å¢useContext<T>(Context)‚Å°
				{
					// interface ContextType {
					// 	theme: string;
					// }
					// const context = useContext<ContextType>(ThemeContext);
				}
			}
			// üî≥ ‚Å°‚Å¢‚Å£‚Å£REFS –ò FORWARDING REFS‚Å°
			{
				// ‚ö™ ‚Å°‚Å£‚Å£‚Å¢React.forwardRef<T, Props>‚Å°
				{
					// const Button = React.forwardRef<HTMLButtonElement, Props>((props, ref) => (
					// <button ref={ref}>{props.text}</button>
					// ));
				}
			}
			// üî≥ ‚Å°‚Å¢‚Å£‚Å£–ö–û–ù–¢–ï–ö–°–¢‚Å°
			{
				// ‚ö™ ‚Å°‚Å£‚Å£‚Å¢React.createContext<T>(defaultValue)‚Å°
				{
					interface Theme {
						darkMode: boolean;
					}
					// const ThemeContext = React.createContext<Theme>({ darkMode: false });
				}
			}
			// üî≥ ‚Å°‚Å¢‚Å£‚Å£–°–û–ë–´–¢–ò–Ø (EVENTS)‚Å°
			{
				// ‚ö™ ‚Å°‚Å£‚Å£‚Å¢React.–•–•–•Event<Element>‚Å°
				{
					// const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {};
					// const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {};
				}
			}
			// üî≥
			// üî≥
		}
		// ‚òëÔ∏è ‚Å°‚Å£‚Å¢‚Å¢–ß–¢–û –¢–ê–ö–û–ï "–£–°–õ–û–í–ù–´–ï –¢–ò–ü–´" (CONDITIONAL TYPES)?‚Å°
		{
			//‚Å°‚Å£‚Å£‚Å¢ –£—Å–ª–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –≤—ã–±–∏—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –¥–≤—É—Ö —Ç–∏–ø–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ª–æ–≤–∏—è.‚Å°
			type IsString<T> = T extends string ? true : false;
			type A = IsString<string>; // true
			type B = IsString<number>; // false
			// –ü—Ä–∏–º–µ—Ä –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ - Exclude
			type Exclude<T, U> = T extends U ? never : T;
			type T = Exclude<"a" | "b" | "c", "a" | "b">; // "c"
		}
		// ‚òëÔ∏è ‚Å°‚Å£‚Å¢‚Å¢–ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê "KEYOF" –ò "IN"?‚Å°
		{
			// ‚Å°‚Å£‚Å£‚Å¢keyof –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–∏ —Ç–∏–ø–∞, in –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á–∞–º.‚Å°
			interface Person {
				name: string;
				age: number;
			}
			type PersonKeys = keyof Person; // "name" | "age"
			type NullablePerson = {
				[K in keyof Person]: Person[K] | null;
			};
			// { name: string | null; age: number | null; }
		}
		// ‚òëÔ∏è ‚Å°‚Å£‚Å¢‚Å¢–ß–¢–û –¢–ê–ö–û–ï "–ò–ù–¢–ï–†–°–ï–ö–®–ù –¢–ò–ü–´" (INTERSECTION TYPES)?‚Å°
		{
			// ‚Å°‚Å£‚Å£‚Å¢–ò–Ω—Ç–µ—Ä—Å–µ–∫—à–Ω —Ç–∏–ø—ã –æ–±—ä–µ–¥–∏–Ω—è—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ –≤ –æ–¥–∏–Ω.‚Å°
			interface Employee {
				id: number;
				name: string;
			}
			interface Manager {
				department: string;
				manage(): void;
			}
			type ManagerEmployee = Employee & Manager;
			const me: ManagerEmployee = {
				id: 1,
				name: "John",
				department: "IT",
				manage() {
					console.log("Managing...");
				},
			};
		}
		// ‚òëÔ∏è ‚Å°‚Å£‚Å¢‚Å°‚Å£‚Å¢‚Å¢–ß–¢–û –¢–ê–ö–û–ï ANY?‚Å°
		{
			// ‚Å°‚Å¢‚Å¢‚Å¢Any ‚Äî —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏–ø –≤ TypeScript, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤. –û–Ω –æ–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, —Ç–∏–ø –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –Ω–∞ –º–æ–º–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. Any –º–æ–∂–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å –ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ JavaScript –±–µ–∑ –≤—Å—è–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.‚Å°
		}
		// ‚òëÔ∏è ‚Å°‚Å£‚Å¢‚Å¢–ß–¢–û –¢–ê–ö–û–ï UNKNOWN?‚Å°
		{
			// ‚Å°‚Å¢‚Å¢‚Å¢Unknown ‚Äî —Ç–∏–ø –≤ TypeScript, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, –æ —Ç–∏–ø–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ –≤–µ—Ä—Å–∏–∏ TypeScript 3.0 –∏ —è–≤–ª—è–µ—Ç—Å—è –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–æ–π —Ç–∏–ø—É any, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç —è–≤–Ω–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.‚Å°
		}
		// ‚òëÔ∏è ‚Å°‚Å£‚Å¢‚Å¢–ß–¢–û –¢–ê–ö–û–ï NEVER?‚Å°
		{
			// ‚Å°‚Å¢‚Å¢‚Å¢never ‚Äî —ç—Ç–æ —Ç–∏–ø –≤ TypeScript, –∫–æ—Ç–æ—Ä—ã–π –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—É–¥–µ—Ç.‚Å°
		}
	}
	// üî≥ ‚Å°‚Å¢‚Å£‚Å£–°–¢–†–£–ö–¢–£–†–ê –¢–ò–ü–û–í‚Å°
	{
		// üîπ ‚Å°‚Å£‚Å¢‚Å¢–°—Ö–µ–º–∞‚Å°
		{
			// ‚Å°‚Å¢‚Å¢‚Å°‚Å£‚Å£‚Å¢‚Å°‚Å¢‚Å¢‚Å¢union(–æ–±–µ–¥–µ–Ω–µ–Ω–∏–µ)(A | B) –∏–ª–∏ —Ç–æ –∏–ª–∏ –¥—Ä—É–≥–æ–µ‚Å°
			// ‚Å°‚Å¢‚Å¢‚Å¢intersection(–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ)(A & B) –∏ —Ç–æ –∏ –¥—Ä—É–≥–æ–µ‚Å°
			// | ‚Å°‚Å£‚Å£‚Å¢generic types‚Å° || ‚Å°‚Å£‚Å£‚Å¢–õ–∏—Ç–µ—Ä–∞–ª—ã("red"|"green")‚Å° || ‚Å°‚Å£‚Å£‚Å¢union(–æ–±–µ–¥–µ–Ω–µ–Ω–∏–µ)/intersection(–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ)(A|B, A&B)‚Å° |
			// | ‚Å°‚Å£‚Å£‚Å¢–ü—Ä–∏–º–∏—Ç–∏–≤—ã‚Å° | 				| ‚Å°‚Å¢‚Å£‚Å¢–¢–ò–ü–´‚Å° |             | ‚Å°‚Å¢‚Å£‚Å°‚Å£‚Å£‚Å°‚Å£‚Å£‚Å¢—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã(any, unknown, never)‚Å°‚Å° |
			// 		| ‚Å°‚Å£‚Å£‚Å¢–°–æ—Å—Ç–∞–≤–Ω—ã–µ —Ç–∏–ø—ã(Composite types) –æ–±—ä–µ–∫—Ç—ã, –º–∞—Å—Å–∏–≤—ã, —Ñ—É–Ω–∫—Ü–∏–∏, –∫–ª–∞—Å—Å—ã‚Å°‚Å° |
		}
		// üîπ ‚Å°‚Å£‚Å°‚Å£‚Å¢‚Å¢–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∏–ø–æ–≤ –≤ TypeScript‚Å°:
		{
			// ‚Å°‚Å£‚Å£‚Å¢–¢–∏–ø—ã‚Å°
			// ‚Å°‚Å£‚Å£‚Å¢‚îú‚îÄ‚îÄ –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ (string, number, boolean, ...)‚Å°
			// ‚Å°‚Å£‚Å£‚Å¢‚îú‚îÄ‚îÄ –û–±—ä–µ–∫—Ç–Ω—ã–µ‚Å°
			// ‚Å°‚Å£‚Å£‚Å¢‚îÇ   ‚îú‚îÄ‚îÄ –û–±—ä–µ–∫—Ç—ã‚Å° - type Person = { name: string; age: number; }‚Å° interface Person {name: string; age: number;}
			// ‚Å°‚Å£‚Å£‚Å¢‚îÇ   ‚îú‚îÄ‚îÄ –ú–∞—Å—Å–∏–≤—ã‚Å°
			// ‚Å°‚Å£‚Å£‚Å¢‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ –ö–æ—Ä—Ç–µ–∂–∏ ‚Äî —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –¥–ª–∏–Ω—ã –∏ —Ç–∏–ø–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º‚Å°.‚Å°
			// ‚Å°‚Å£‚Å£‚Å°‚Å£‚Å£‚Å°‚Å£‚Å£‚Å¢‚îÇ   ‚îî‚îÄ‚îÄ Enums(–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è) - enum Color {Red = "RED",  Green = "GREEN",  Blue = "BLUE"}‚Å°
			// ‚Å°‚Å£‚Å£‚Å¢‚îú‚îÄ‚îÄ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ (any, unknown, never, void)‚Å°
			// ‚Å°‚Å£‚Å£‚Å¢‚îú‚îÄ‚îÄ –ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–µ‚Å°
			// ‚Å°‚Å£‚Å£‚Å¢‚îÇ	‚îú‚îÄ‚îÄ Union Types (`|`) ‚Äî –≤—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ –∏–∑‚Å°
			// ‚Å°‚Å£‚Å£‚Å¢‚îÇ	‚îú‚îÄ‚îÄ Intersection Types (`&`) ‚Äî –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö‚Å°
			// ‚Å°‚Å£‚Å£‚Å¢‚îÇ	‚îú‚îÄ‚îÄ –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ (`|` + `&`)‚Å°
			// ‚Å°‚Å£‚Å£‚Å¢‚îÇ	‚îî‚îÄ‚îÄ –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ç–∏–ø—ã (Partial, Pick, Readonly, Omit)‚Å°
			// ‚Å°‚Å£‚Å£‚Å¢‚îú‚îÄ‚îÄ –û–±–æ–±—â—ë–Ω–Ω—ã–µ (Generics)‚Å°
			// ‚Å°‚Å£‚Å£‚Å¢‚îî‚îÄ‚îÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ‚Å°
			// ‚Å°‚Å£‚Å£‚Å¢‚îÇ	  ‚îú‚îÄ‚îÄ Mapped Types ‚Äî ¬´–æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–∏–ø¬ª‚Å°
			// ‚Å°‚Å£‚Å°‚Å£‚Å£‚Å¢‚îÇ		‚îú‚îÄ‚îÄ Conditional Types ‚Äî ¬´–µ—Å–ª–∏-—Ç–æ-–∏–Ω–∞—á–µ¬ª –¥–ª—è —Ç–∏–ø–æ–≤‚Å°
			// ‚Å°‚Å£‚Å°‚Å£‚Å£‚Å¢‚îÇ		‚îú‚îÄ‚îÄ Infer ‚Äî ¬´–≤—ã–≤–µ–¥–∏ —Ç–∏–ø –∑–∞ –º–µ–Ω—è¬ª‚Å°
			// ‚Å°‚Å£‚Å°‚Å£‚Å£‚Å¢‚îÇ		‚îú‚îÄ‚îÄ Indexed Access Types (T[K]) ‚Äî ¬´–ø–æ–ª—É—á–∏—Ç—å —Ç–∏–ø –ø–æ –∫–ª—é—á—É¬ª‚Å°
			// ‚Å°‚Å£‚Å£‚Å¢‚îÇ	  ‚îî‚îÄ‚îÄ Template Literal Types ‚Äî ¬´—Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ —Ç–∏–ø—ã¬ª‚Å°
		}
		// üîπ ‚Å°‚Å£‚Å¢‚Å¢–≠–∫—Å–ø–æ—Ä—Ç / –∏–º–ø–æ—Ä—Ç typescript‚Å°
		{
			// export
			type Todo = {
				id: number;
				text: string;
				completed: boolean;
			};
			// export
			type TodoItemProps = {
				todo: Todo;
				onToggle: (id: number) => void;
				// onDelete: (id: number) => void;
			};
			// import * as Types from "./TypeTodoList";
			// Type.Todo Type.TodoItemProps
		}
	}
	// ‚Å°‚Å¢‚Å£üî≥ ‚Å°‚Å¢‚Å£‚Å£–¢–ò–ü–´ –ò –ò–ù–¢–ï–†–§–ï–ô–°–´‚Å°
	{
		// ‚Å°‚Å¢‚Å¢‚Å¢–ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã:‚Å°
		{
			let name: string = "TypeScript";
			let count: number = 10;
			let bigint: bigint = 123n;
			let isDone: boolean = false;
			// let null: null = null;
			// let undefined: undefined = undefined;
			let simbol: symbol = Symbol("id");

			// –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã
			type ID = string | number;
			type Status = "active" | "inactive";
			// –û–±—ä–µ–∫—Ç—ã
			interface User {
				id: ID;
				name: string;
				age?: number; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
			}
			// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ interface
			interface Admin extends User {
				permissions: string[];
			}
			// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ type
			type SuperAdmin = Admin & { level: number };
		}
		// ‚Å°‚Å¢‚Å¢‚Å¢–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã‚Å°
		{
			let any: any = "Hello";
			let unknown: unknown = "Hello";
			let never: never;
			// let void: void = "Hello";
		}
		// ‚Å°‚Å¢‚Å¢‚Å¢–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:‚Å°
		{
			interface User {
				id: number;
				name: string;
				age?: number; // –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
			}
			const user: User = {
				id: 1,
				name: "John",
			};
			// –ó–∞–ø—Ä–µ—Ç –ª–∏—à–Ω–∏—Ö —Å–≤–æ–π—Å—Ç–≤ (—á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
			interface StrictUser {
				id: string;
				name: string;
				[key: number]: never; // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
			}
			// –¢–æ—á–Ω—ã–µ —Ç–∏–ø—ã (—Å –¥–∂–µ–Ω–µ—Ä–∏–∫–∞–º–∏)
			type Exact<T> = T & { [K in Exclude<PropertyKey, keyof T>]?: never };
			type StrictUserType = Exact<{ id: string; name: string }>;
			// –û–±–æ–±—â–µ–Ω–Ω—ã–π —Ç–∏–ø
			type ApiResponse<T = void> = {
				data: T;
				error: string | null;
			};
			// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
			const userResponse: ApiResponse<User> = {
				data: { id: 1, name: "Alice" },
				error: null,
			};
			// –û–±–æ–±—â–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
			function identity<T>(arg: T): T {
				return arg;
			}
			// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤
			interface HasLength {
				length: number;
			}
			function logLength<T extends HasLength>(obj: T): void {
				console.log(obj.length);
			}
		}
		// ‚Å°‚Å¢‚Å¢‚Å¢–¢–∏–ø—ã vs –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:‚Å°
		{
			// ‚Å°‚Å¢‚Å£‚Å£–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å‚Å°
			interface Point {
				x: number;
				y: number;
			}
			// ‚Å°‚Å¢‚Å£‚Å£–¢–∏–ø‚Å°
			type Point1 = {
				x: number;
				y: number;
			};
			// ‚Å°‚Å£‚Å£‚Å¢–û—Å–Ω–æ–≤–Ω–æ–µ –æ—Ç–ª–∏—á–∏–µ: –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å‚Å°
			interface Point3D extends Point {
				z: number;
			}
		}
	}
	// üî≥ ‚Å°‚Å¢‚Å£‚Å£–î–ñ–ï–ù–ï–†–ò–ö–ò (GENERICS, –û–ë–û–ë–©–ï–ù–ò–Ø)‚Å°
	// ‚Å°‚Å£‚Å£‚Å¢–°—É—Ç—å –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –≤–æ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–¥ –±–æ–ª–µ–µ –≥–∏–±–∫–∏–º –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º.‚Å°
	{
		interface KeyValuePair<K, V> {
			key: K;
			value: V;
		}
		const agePair: KeyValuePair<string, number> = {
			key: "age",
			value: 25,
		};
		const userPair: KeyValuePair<number, string> = {
			key: 1,
			value: "Alice",
		};
		async function fetchDataQuery<T>(url: string): Promise<T> {
			const response = await fetch(url);
			return response.json();
		}
		interface User {
			id: number;
			name: string;
		}
		// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
		// const userData = (await fetchDataQuery) < User > "/api/user";
		// ‚ö° ‚Å°‚Å£‚Å£‚Å¢–î–µ–Ω–µ—Ä–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞—Å–ª–µ–¥—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å‚Å°
		interface Lengthwise {
			length: number;
		}
		function getLength<T extends Lengthwise>(arg: T): number {
			return arg.length;
		}
		getLength(["–Ø", "–ª—é–±–ª—é", "–¢–∏–Ω—å–∫–æ—Ñ—Ñ"]) === 3;
		getLength("–Ø –ª—é–±–ª—é –¢–∏–Ω—å–∫–æ—Ñ—Ñ") === 16;
		// getLength(1027739642281); // –û—à–∏–±–∫–∞, —É number –Ω–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ length
	}
	// üî≥ ‚Å°‚Å¢‚Å£‚Å£–ö–õ–ê–°–°–´ –ò –ú–û–î–ò–§–ò–ö–ê–¢–û–†–´ –î–û–°–¢–£–ü–ê (PUBLIC, PRIVATE, PROTECTED)‚Å°:‚Å°
	// ‚Å°‚Å£‚Å£‚Å¢–ö–ª–∞—Å—Å—ã –≤ TypeScript ‚Äî —ç—Ç–æ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ –∏ –º–µ—Ç–æ–¥–∞–º–∏. –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–æ—Å—Ç—É–ø–∞ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å —á–ª–µ–Ω–æ–≤ –∫–ª–∞—Å—Å–∞ (—Å–≤–æ–π—Å—Ç–≤ –∏ –º–µ—Ç–æ–¥–æ–≤) –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.‚Å°
	{
		// ‚Å°‚Å£‚Å¢‚Å¢–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–æ—Å—Ç—É–ø–∞‚Å°‚Å°‚Å£‚Å¢‚Å¢:‚Å°
		// ‚Å°‚Å£‚Å£‚Å¢1. public (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ–∑–¥–µ, –≥–¥–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∫–ª–∞—Å—Å.‚Å°
		// ‚Å°‚Å£‚Å£‚Å¢2. private: –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞.‚Å°
		// ‚Å°‚Å£‚Å£‚Å¢3. protected: –¥–æ—Å—Ç—É–ø–µ–Ω –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞ –∏ –µ–≥–æ –ø–æ–¥–∫–ª–∞—Å—Å–æ–≤.‚Å°‚Å°
		// ‚Å°‚Å£‚Å£‚Å¢4. readonly: –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è, –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.‚Å°
		class Person {
			// –ü—É–±–ª–∏—á–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
			public name: string;
			// –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
			private age: number;
			// –ó–∞—â–∏—â–µ–Ω–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
			protected id: string;
			// Readonly —Å–≤–æ–π—Å—Ç–≤–æ
			readonly birthDate: Date;
			constructor(name: string, age: number, id: string, birthDate: Date) {
				this.name = name;
				this.age = age;
				this.id = id;
				this.birthDate = birthDate;
			}
			// –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥
			public greet() {
				console.log(`Hello, my name is ${this.name}`);
				// –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —Å–≤–æ–π—Å—Ç–≤—É –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞
				console.log(`I'm ${this.age} years old`);
			}
			// –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
			private calculateBirthYear(): number {
				return this.birthDate.getFullYear();
			}
		}
		// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
		const person = new Person("Alice", 30, "ID123", new Date(1993, 5, 15));
		console.log(person.name); // OK - public
		// console.log(person.age); // –û—à–∏–±–∫–∞ - private
		// console.log(person.id); // –û—à–∏–±–∫–∞ - protected
		person.greet(); // OK - public –º–µ—Ç–æ–¥
		// person.calculateBirthYear(); // –û—à–∏–±–∫–∞ - private –º–µ—Ç–æ–¥
		// ‚Å°‚Å£‚Å£‚Å¢–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ protected‚Å°
		class Employee extends Person {
			private salary: number;

			constructor(name: string, age: number, id: string, birthDate: Date, salary: number) {
				super(name, age, id, birthDate);
				this.salary = salary;
			}

			public showEmployeeInfo() {
				console.log(`Employee ID: ${this.id}`); // OK - protected –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ
				// console.log(this.age); // –û—à–∏–±–∫–∞ - private –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
				console.log(`Salary: ${this.salary}`);
			}
		}

		const emp = new Employee("Bob", 35, "EMP456", new Date(1988, 2, 10), 5000);
		emp.showEmployeeInfo(); // OK - public –º–µ—Ç–æ–¥
		// ‚Å°‚Å£‚Å£‚Å¢–°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ‚Å°
		class Product {
			constructor(
				public id: number,
				private name: string,
				protected price: number,
				readonly createdAt: Date = new Date(),
			) {}

			public getDescription(): string {
				return `${this.name} costs $${this.price}`;
			}
		}

		const product = new Product(1, "Laptop", 999);
		console.log(product.id); // OK
		// console.log(product.name); // –û—à–∏–±–∫–∞ - private
		console.log(product.getDescription()); // OK - public –º–µ—Ç–æ–¥
		// console.log(product.createdAt); // OK - readonly –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
		// ‚Å°‚Å£‚Å£‚Å¢Getter –∏ Setter‚Å°
		class BankAccount {
			private _balance: number = 0;

			// Getter
			public get balance(): number {
				return this._balance;
			}

			// Setter —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
			public set balance(amount: number) {
				if (amount >= 0) {
					this._balance = amount;
				} else {
					console.log("Balance cannot be negative");
				}
			}
		}
		const account = new BankAccount();
		account.balance = 100; // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è setter
		console.log(account.balance); // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è getter
		account.balance = -50; // –û—à–∏–±–∫–∞ —á–µ—Ä–µ–∑ setter
		// ‚Å°‚Å£‚Å£‚Å¢–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —á–ª–µ–Ω—ã –∫–ª–∞—Å—Å–∞‚Å°
		class MathHelper {
			// –°—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
			public static readonly PI = 3.14159;

			// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥
			public static calculateCircleArea(radius: number): number {
				return this.PI * radius * radius;
			}
		}
		// –î–æ—Å—Ç—É–ø –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
		console.log(MathHelper.PI);
		console.log(MathHelper.calculateCircleArea(5));
		// ‚Å°‚Å£‚Å£‚Å¢–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã‚Å°
		abstract class Animal {
			constructor(public name: string) {}

			// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ (–±–µ–∑ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
			public abstract makeSound(): void;

			// –û–±—ã—á–Ω—ã–π –º–µ—Ç–æ–¥
			public move(distance: number = 0): void {
				console.log(`${this.name} moved ${distance}m`);
			}
		}
		class Dog extends Animal {
			constructor(name: string) {
				super(name);
			}
			// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
			public makeSound(): void {
				console.log("Woof! Woof!");
			}
		}
		const dog = new Dog("Rex");
		dog.makeSound();
		dog.move(10);
		// ‚Å°‚Å£‚Å¢‚Å¢–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:‚Å°
		// ‚Å°‚Å£‚Å£‚Å¢-- public - –¥–ª—è API –∫–ª–∞—Å—Å–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø –∏–∑–≤–Ω–µ‚Å°
		// ‚Å°‚Å£‚Å£‚Å¢-- private - –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–∫—Ä—ã—Ç—å‚Å°
		// ‚Å°‚Å£‚Å£‚Å¢-- protected - –¥–ª—è —á–ª–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö‚Å°
		// ‚Å°‚Å£‚Å£‚Å¢-- readonly - –¥–ª—è —Å–≤–æ–π—Å—Ç–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–∑–º–µ–Ω—è—Ç—å—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏‚Å°
		// ‚Å°‚Å£‚Å£‚Å¢–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∫–æ–¥, —á–µ—Ç–∫–æ –æ–ø—Ä–µ–¥–µ–ª—è—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∫–ª–∞—Å—Å–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.‚Å°
	}
	// üî≥ ‚Å°‚Å¢‚Å£‚Å£–î–ï–ö–û–†–ê–¢–û–†–´ (DECORATORS)‚Å°‚Å°
	// ‚Å°‚Å£‚Å£‚Å¢–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã ‚Äî —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ –∏–∑–º–µ–Ω—è—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤, –º–µ—Ç–æ–¥–æ–≤, —Å–≤–æ–π—Å—Ç–≤, –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ –∞–∫—Å–µ—Å—Å–æ—Ä–æ–≤ (–≥–µ—Ç—Ç–µ—Ä–æ–≤/—Å–µ—Ç—Ç–µ—Ä–æ–≤). –û–Ω–∏ —à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞—Ö –≤—Ä–æ–¥–µ Angular, NestJS –∏ TypeORM.‚Å°
	{
		function sealed(constructor: Function) {
			Object.seal(constructor);
			Object.seal(constructor.prototype);
		}
		@sealed
		class Greeter {
			greeting: string;
			constructor(message: string) {
				this.greeting = message;
			}
			greet() {
				return "Hello, " + this.greeting;
			}
		}
	}
	// üî≥ ‚Å°‚Å¢‚Å£‚Å£–£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –¢–ò–ü–´ (UTILITY TYPES)‚Å°:‚Å°
	// ‚Å°‚Å£‚Å£‚Å¢–£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ç–∏–ø—ã (–∏–ª–∏ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö) ‚Äî —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á, —Ç–∞–∫–∏—Ö –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –≤–∞–ª–∏–¥–∞—Ü–∏—è, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏. –û–Ω–∏ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Å—Ç—Ä–æ–≥–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–∞—Ö (TypeScript, Rust, Haskell –∏ –¥—Ä.) –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è –µ–≥–æ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.‚Å°
	{
		// ‚Å°‚Å£üîπ‚Å¢ ‚Å°‚Å£‚Å¢‚Å¢Partial<T>:‚Å°‚Å° ‚Å°‚Å¢‚Å¢‚Å¢–î–µ–ª–∞–µ—Ç –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–∏–ø–∞ T –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏.‚Å°
		{
			// ‚Å°‚Å£‚Å£‚Å¢–ü—Ä–∏–º–µ—Ä:‚Å°
			interface User {
				name: string;
				age: number;
			}
			type PartialUser = Partial<User>;
			// –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ:
			// { id?: number; name?: string; email?: string; }

			const userDraft: PartialUser = { name: "Alice" }; // OK
		}
		// üîπ ‚Å°‚Å£‚Å¢‚Å¢Required<T>:‚Å° ‚Å°‚Å¢‚Å¢‚Å¢–î–µ–ª–∞–µ—Ç –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–∏–ø–∞ T –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏.‚Å°
		{
			// ‚Å°‚Å£‚Å£‚Å¢–ü—Ä–∏–º–µ—Ä:‚Å°
			interface User {
				name: string;
				age: number;
			}
			type OptionalUser = { id?: number; name?: string };
			type RequiredUser = Required<OptionalUser>;
			// { id: number; name: string }
			const user: RequiredUser = { id: 1, name: "Bob" }; // OK
			type PartialUser = Partial<User>; // { name?: string; age?: number }
		}
		// ‚Å°‚Å£‚Å¢üîπ ‚Å°‚Å£‚Å¢‚Å¢Readonly<T>‚Å°:‚Å°‚Å° ‚Å°‚Å¢‚Å¢‚Å¢–î–µ–ª–∞–µ—Ç –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–∏–ø–∞ T –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è.‚Å°
		{
			// ‚Å°‚Å£‚Å£‚Å¢–ü—Ä–∏–º–µ—Ä:‚Å°
			interface User {
				name: string;
				age: number;
			}
			type ReadonlyUser = Readonly<User>;
			// { readonly id: number; readonly name: string; ... }
			const user: ReadonlyUser = { age: 1, name: "Charlie" };
			// user.name = "Dave"; // –û—à–∏–±–∫–∞: –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å readonly-—Å–≤–æ–π—Å—Ç–≤–æ.
		}
		// üîπ ‚Å°‚Å£‚Å¢‚Å¢Record<K, T>:‚Å° ‚Å°‚Å¢‚Å¢‚Å¢–°–æ–∑–¥–∞—ë—Ç —Ç–∏–ø —Å –∫–ª—é—á–∞–º–∏ K –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ T.‚Å°
		{
			interface User {
				name: string;
				id: number;
				email: string;
			}
			type UserRoles = Record<"admin" | "user", User>;
			// –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ:
			// { admin: User; user: User; }
			const roles: UserRoles = {
				admin: { id: 1, name: "Admin", email: "admin@test.com" },
				user: { id: 2, name: "User", email: "user@test.com" },
			};
		}
		// üîπ ‚Å°‚Å£‚Å¢‚Å¢Pick<T, K>: ‚Å°‚Å°‚Å¢‚Å¢‚Å¢–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–∏–ø, –≤—ã–±–∏—Ä–∞—è —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ K –∏–∑ —Ç–∏–ø–∞ T.‚Å°‚Å°
		{
			// ‚Å°‚Å£‚Å£‚Å¢–ü—Ä–∏–º–µ—Ä:‚Å°
			interface User {
				name: string;
				email: string;
			}
			type UserName = Pick<User, "name">; // { name: string }
			type UserPreview = Pick<User, "name" | "email">;
			// { name: string; email: string; }
			const preview: UserPreview = { name: "Eve", email: "eve@test.com" };
		}
		// üîπ ‚Å°‚Å£‚Å¢‚Å¢Omit<T, K>:‚Å°‚Å° ‚Å°‚Å¢‚Å¢‚Å¢–£–¥–∞–ª—è–µ—Ç –∏–∑ —Ç–∏–ø–∞ T —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ K.‚Å°
		{
			// ‚Å°‚Å£‚Å£‚Å¢–ü—Ä–∏–º–µ—Ä:‚Å°
			interface User {
				name: string;
				id: number;
				email: string;
			}
			type UserWithoutEmail = Omit<User, "email">;
			// { id: number; name: string; }
			const user: UserWithoutEmail = { id: 3, name: "Frank" };
		}
		// üîπ ‚Å°‚Å£‚Å¢‚Å¢Exclude<T, U>:‚Å° ‚Å°‚Å¢‚Å¢‚Å¢–ò—Å–∫–ª—é—á–∞–µ—Ç –∏–∑ T —Ç–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ U.‚Å°
		{
			// ‚Å°‚Å£‚Å£‚Å¢–ü—Ä–∏–º–µ—Ä:‚Å°
			type T0 = Exclude<"a" | "b" | "c", "a">; // "b" | "c"
			type T1 = Exclude<string | number | (() => void), Function>; // string | number
		}
		// üîπ ‚Å°‚Å£‚Å¢‚Å°‚Å£‚Å¢‚Å¢Extract<T, U>:‚Å° ‚Å°‚Å¢‚Å¢‚Å¢–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ T —Ç–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å U.‚Å°
		{
			// ‚Å°‚Å£‚Å£‚Å¢–ü—Ä–∏–º–µ—Ä:‚Å°
			type T2 = Extract<"a" | "b" | "c", "a" | "d">; // "a"
			type T3 = Extract<string | number | (() => void), Function>; // () => void
		}
		// üîπ ‚Å°‚Å£‚Å¢‚Å¢NonNullable<T>:‚Å° ‚Å°‚Å¢‚Å¢‚Å¢–£–¥–∞–ª—è–µ—Ç null –∏ undefined –∏–∑ T.‚Å°
		{
			// ‚Å°‚Å£‚Å£‚Å¢–ü—Ä–∏–º–µ—Ä:‚Å°
			type T4 = NonNullable<string | null | undefined>; // string
		}
		// üîπ ‚Å°‚Å£‚Å¢‚Å¢ReturnType<T>:‚Å° ‚Å°‚Å¢‚Å¢‚Å¢–ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏.‚Å°
		{
			interface User {
				name: string;
				id: number;
				email: string;
			}
			const getUser = (): User => ({ id: 1, name: "Alice", email: "alice@test.com" });
			type GetUserReturnType = ReturnType<typeof getUser>; // User
		}
		// üîπ ‚Å°‚Å£‚Å¢‚Å¢Parameters<T>:‚Å° ‚Å°‚Å¢‚Å¢‚Å¢–ü–æ–ª—É—á–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ —Ç–∏–ø–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏.‚Å°
		{
			type Func = (a: number, b: string) => void;
			type FuncParams = Parameters<Func>; // [a: number, b: string]
		}
		// üîπ ‚Å°‚Å£‚Å¢‚Å¢ConstructorParameters<T>:‚Å° ‚Å°‚Å¢‚Å¢‚Å¢–ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∫–ª–∞—Å—Å–∞.‚Å°
		{
			class Person {
				constructor(
					public name: string,
					public age: number,
				) {}
			}
			type PersonParams = ConstructorParameters<typeof Person>; // [name: string, age: number]
		}
		// üîπ ‚Å°‚Å£‚Å¢‚Å¢InstanceType<T>:‚Å° ‚Å°‚Å¢‚Å¢‚Å¢–ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞.‚Å°
		{
			class Person {
				constructor(
					public name: string,
					public age: number,
				) {}
			}
			type PersonInstance = InstanceType<typeof Person>; // Person
		}
		// üîπ ‚Å°‚Å£‚Å¢‚Å¢Awaited<T> (TypeScript 4.5+):‚Å° ‚Å°‚Å¢‚Å¢‚Å¢–†–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Ç–∏–ø –ø—Ä–æ–º–∏—Å–∞ –∏–ª–∏ —Ü–µ–ø–æ—á–∫–∏ –ø—Ä–æ–º–∏—Å–æ–≤.‚Å°
		{
			type PromiseType = Awaited<Promise<Promise<string>>>; // string
		}
		// üîπ ‚Å°‚Å£‚Å¢‚Å°‚Å£‚Å¢‚Å¢–°—Ç—Ä–æ–∫–æ–≤—ã–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏:‚Å° ‚Å°‚Å¢‚Å¢‚Å¢–¢–∏–ø—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º–∏ –ª–∏—Ç–µ—Ä–∞–ª–∞–º–∏:‚Å°
		{
			type T5 = Uppercase<"hello">; // "HELLO"
			type T6 = Lowercase<"HELLO">; // "hello"
			type T7 = Capitalize<"hello">; // "Hello"
			type T8 = Uncapitalize<"Hello">; // "hello"
		}
		// üîπ
		// ‚Å°‚Å£‚Å£‚Å¢–ó–∞–∫–ª—é—á–µ–Ω–∏–µ‚Å°
		// ‚Å°‚Å£‚Å£‚Å¢-- –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–º–æ–≥–∞—é—Ç:‚Å°
		// ‚Å°‚Å£‚Å£‚Å¢-- –£–ø—Ä–æ—â–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö,‚Å°
		// ‚Å°‚Å£‚Å£‚Å¢-- –î–µ–ª–∞—Ç—å –∫–æ–¥ –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º,‚Å°
		// ‚Å°‚Å£‚Å£‚Å¢-- –ò–∑–±–µ–≥–∞—Ç—å –æ—à–∏–±–æ–∫ –Ω–∞ —ç—Ç–∞–ø–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏.‚Å°
		// ‚Å°‚Å£‚Å£‚Å¢-- –ò—Ö —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏.‚Å°
	}
	// üî≥ ‚Å°‚Å¢‚Å£‚Å£TYPE GUARDS (–°–¢–†–ê–ñ–ò –¢–ò–ü–û–í)‚Å°
	{
		// ‚Å°‚Å£‚Å£‚Å¢Type Guards (—Å—Ç—Ä–∞–∂–∏ —Ç–∏–ø–æ–≤) - —ç—Ç–æ –º–µ—Ö–∞–Ω–∏–∑–º TypeScript, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —Å—É–∂–∞—Ç—å —Ç–∏–ø—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –±–ª–æ–∫–∞ –∫–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ —É—Å–ª–æ–≤–∏–π.
		// üî≥ ‚Å°‚Å¢‚Å£‚Å£–ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø TYPE GUARDS‚Å°
		{
			// üîπ ‚Å°‚Å£‚Å¢‚Å¢–í–°–¢–†–û–ï–ù–ù–´–ï (BUILT-IN) TYPE GUARDS‚Å°
			{
				// ‚úÖ ‚Å°‚Å¢‚Å¢‚Å¢typeof - –¥–ª—è –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤‚Å°
				// ‚úÖ ‚Å°‚Å¢‚Å¢‚Å¢instanceof - –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∞—Å—Å–æ–≤‚Å°
				// ‚úÖ ‚Å°‚Å¢‚Å¢‚Å¢in - –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Å–≤–æ–π—Å—Ç–≤–∞ –≤ –æ–±—ä–µ–∫—Ç–µ‚Å°
			}
			// üîπ ‚Å°‚Å£‚Å¢‚Å¢–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï TYPE GUARDS‚Å°
			{
				// ‚≠ê ‚Å°‚Å£‚Å£‚Å¢–§—É–Ω–∫—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–µ –ø—Ä–µ–¥–∏–∫–∞—Ç —Ç–∏–ø–∞ (type predicate)‚Å°
			}
			// üîπ ‚Å°‚Å£‚Å¢‚Å¢–ó–ê–©–ò–¢–ù–ò–ö–ò –ù–ê –û–°–ù–û–í–ï DISCRIMINATED UNIONS‚Å°
			{
				// ‚≠ê ‚Å°‚Å£‚Å£‚Å¢–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –ø–æ–ª—è (–¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä–∞) –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤‚Å°
			}
		}
		// üî≥ ‚Å°‚Å¢‚Å£‚Å£–û–ë–õ–ê–°–¢–ò –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø‚Å°
		{
			// ‚úÖ ‚Å°‚Å¢‚Å¢‚Å¢–†–∞–±–æ—Ç–∞ —Å –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ (union types)‚Å°
			// ‚úÖ ‚Å°‚Å¢‚Å¢‚Å¢–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (unknown, any)‚Å°
			// ‚úÖ ‚Å°‚Å¢‚Å¢‚Å¢–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (runtime type checking)‚Å°
			// ‚úÖ ‚Å°‚Å¢‚Å¢‚Å¢–†–∞–±–æ—Ç–∞ —Å API, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤‚Å°
		}
		// üî≥ ‚Å°‚Å¢‚Å£‚Å£–ü–†–ò–ú–ï–†–´‚Å°
		{
			// ‚ö° ‚Å°‚Å£‚Å£‚Å¢typeof‚Å°
			{
				function padLeft(value: string, padding: string | number) {
					if (typeof padding === "number") {
						return Array(padding + 1).join(" ") + value; // padding: number
					}
					return padding + value; // padding: string
				}
			}
			// ‚ö° ‚Å°‚Å£‚Å£‚Å¢instanceof‚Å°
			{
				class Bird {
					fly() {
						console.log("Flying");
					}
				}
				class Fish {
					swim() {
						console.log("Swimming");
					}
				}
				function move(pet: Bird | Fish) {
					if (pet instanceof Bird) {
						pet.fly(); // pet: Bird
					} else {
						pet.swim(); // pet: Fish
					}
				}
			}
			// ‚ö° ‚Å°‚Å£‚Å£‚Å¢in‚Å°
			{
				interface Circle {
					kind: "circle";
					radius: number;
				}
				interface Square {
					kind: "square";
					sideLength: number;
				}

				function getArea(shape: Circle | Square) {
					if ("radius" in shape) {
						return Math.PI * shape.radius ** 2; // shape: Circle
					}
					return shape.sideLength ** 2; // shape: Square
				}
			}
			// ‚ö° ‚Å°‚Å£‚Å£‚Å¢–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π Type Guard‚Å°
			{
				// ‚≠ê ‚Å°‚Å£‚Å£‚Å¢–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ ¬´is¬ª —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ‚Å°
				function isString(value: any): value is string {
					return typeof value === "string";
				}
				function process_1(input: string | number) {
					if (isString(input)) {
						console.log(input.toUpperCase()); // input: string
					} else {
						console.log(input.toFixed(2)); // input: number
					}
				}
			}
			// ‚ö° ‚Å°‚Å£‚Å£‚Å¢Discriminated Unions‚Å°
			{
				type Success = {
					type: "success";
					data: string;
				};
				type Error = {
					type: "error";
					message: string;
				};
				function handleResponse(response: Success | Error) {
					switch (response.type) {
						case "success":
							console.log(response.data); // response: Success
							break;
						case "error":
							console.error(response.message); // response: Error
							break;
					}
				}
			}
		}
	}
	// üî≥ ‚Å°‚Å¢‚Å£‚Å£–¢–ò–ü–ò–ó–ê–¶–ò–Ø –§–£–ù–ö–¶–ò–ô‚Å°
	{
		// üîπ ‚Å°‚Å£‚Å¢‚Å°‚Å£‚Å¢‚Å¢–î–∂–µ–Ω–µ—Ä–∏–∫–∏ (Generics), –î–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏‚Å°
		{
			// –û–±–æ–±—â–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
			function identity<T>(arg: T): T {
				return arg;
			}
			identity<string>("5"); // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
			// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤
			interface HasLength {
				length: number;
			}
			function logLength<T extends HasLength>(obj: T): void {
				console.log(obj.length);
			}
			logLength({ length: 5 }); // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
		}
		// üîπ ‚Å°‚Å£‚Å¢‚Å¢–î–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (Function Declaration)‚Å°
		{
			// –°—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è
			function add(a: number, b: number): number {
				return a + b;
			}
			add(5, 7);
			// –û–±—ã—á–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è (–≤—ã–≤–æ–¥ —Ç–∏–ø–æ–≤)
			function greet(name: string) {
				// :string –≤—ã–≤–æ–¥–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
				return `Hello, ${name}`;
			}
			greet("Word");
			// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
			type User = {
				id: number;
				name: string;
				age: number;
			};
			function createUser(name: string, age: number = 18): User {
				return { id: Math.random(), name, age };
			}
			createUser("–ò–≤–∞–Ω");
		}
		// üîπ ‚Å°‚Å£‚Å¢‚Å¢–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (Function Expression)‚Å°
		{
			// –Ø–≤–Ω–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è —Ç–∏–ø–∞
			const sum: (a: number, b: number) => number = function (a, b) {
				return a + b;
			};
			sum(5, 7);
			type ID = {
				id: number;
			};
			type User = {
				id: ID;
				name: string;
				age: number;
			};
			// –í—ã–≤–æ–¥ —Ç–∏–ø–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç
			const users: User[] = [];
			const findUser = function (id: ID) {
				return users.find((u) => u.id === id);
			}; // (id: ID) => User | undefined
			findUser({ id: 5 });
		}
		// üîπ ‚Å°‚Å£‚Å¢‚Å¢–°—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (Arrow Functions)‚Å°
		{
			// –Ø–≤–Ω–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è
			const multiply: (a: number, b: number) => number = (a, b) => a * b;
			multiply(5, 7);
			// –í—ã–≤–æ–¥ —Ç–∏–ø–∞
			const toUpperCase = (str: string) => str.toUpperCase(); // :string
			toUpperCase("string");
			// –î–∂–µ–Ω–µ—Ä–∏–∫–∏ —Å–æ —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
			const reverse = <T>(array: T[]): T[] => array.reverse();
			reverse<string>(["–∞–Ω–Ω–∞"]);
			reverse<number>([5, 0, 0, 5]);
		}
		// üîπ ‚Å°‚Å£‚Å¢‚Å¢IIFE (Immediately Invoked Function Expressions)‚Å°
		{
			// –°—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
			const result = ((prefix: string): string => {
				return prefix + Math.random().toString(36).substring(2);
			})("id_");
			// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è IIFE
			interface ApiResponse {
				id: number;
				name: string;
			}
			(async () => {
				const data: ApiResponse[] = await fetch("http://localhost:3002/rooms").then((res) =>
					res.json(),
				);
			})();
			const getFromCache = () => {
				return 5;
			};
			// –î–∂–µ–Ω–µ—Ä–∏–∫ –≤ IIFE
			const results = (function <T>(arg: T): T {
				return arg;
			})<number>(42);
			console.log(results); // 42
			// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å —è–≤–Ω—ã–º –≤—ã–∑–æ–≤–æ–º
			const value = (function <T>(arg: T): T {
				return arg;
			})<string>("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, TypeScript!");
			console.log(value); // "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, TypeScript!"
		}
		// üîπ ‚Å°‚Å£‚Å¢‚Å¢–ö–ª—é—á–µ–≤—ã–µ —Ä–∞–∑–ª–∏—á–∏—è —Ç–∏–ø–∏–∑–∞—Ü–∏–π‚Å°
		{
			// ‚Å°‚Å¢‚Å£‚Å£–°–ò–¢–£–ê–¶–ò–Ø						–û–ë–´–ß–ù–ê–Ø –¢–ò–ü–ò–ó–ê–¶–ò–Ø							–°–¢–†–û–ì–ê–Ø –¢–ò–ü–ò–ó–ê–¶–ò–Ø‚Å°
			// ‚Å°‚Å£‚Å£‚Å¢–õ–∏—à–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤ –æ–±—ä–µ–∫—Ç–µ	–†–∞–∑—Ä–µ—à–µ–Ω—ã ({ id:1, name:"A", age:20 })		–ó–∞–ø—Ä–µ—â–µ–Ω—ã (age –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É)‚Å°
			// ‚Å°‚Å£‚Å£‚Å¢–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–π			–ù–µ—è–≤–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–∏–ø–∞ (function(a) { ... })	–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è (a: number)‚Å°
			// ‚Å°‚Å£‚Å£‚Å¢–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞		age?: number (–¥–æ–ø—É—Å–∫–∞–µ—Ç undefined)			–¢—Ä–µ–±—É–µ—Ç —è–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ undefined‚Å°
		}
		// üîπ ‚Å°‚Å£‚Å¢‚Å¢–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏‚Å°
		{
			// ‚úÖ ‚Å°‚Å¢‚Å¢‚Å¢interface vs type:‚Å°
			{
				// ‚ö° ‚Å°‚Å¢‚Å£‚Å£–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ interface –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤/–∫–ª–∞—Å—Å–æ–≤ (–ª—É—á—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ IDE).‚Å°
				// ‚ö° ‚Å°‚Å¢‚Å£‚Å£–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ type –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–π, –∫–æ—Ä—Ç–µ–∂–µ–π –∏ —Å–ª–æ–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤.‚Å°
			}
			// ‚úÖ ‚Å°‚Å¢‚Å¢‚Å¢–°—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è:‚Å°
			{
				// ‚ö° ‚Å°‚Å¢‚Å£‚Å£–í–∫–ª—é—á–∏—Ç–µ –≤ tsconfig.json: "strict": true.‚Å°
				// ‚ö° ‚Å°‚Å¢‚Å£‚Å£–í—Å–µ–≥–¥–∞ –∞–Ω–Ω–æ—Ç–∏—Ä—É–π—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ —Ç–∏–ø—ã –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö.‚Å°
			}
			// ‚úÖ ‚Å°‚Å¢‚Å¢‚Å¢–î–∂–µ–Ω–µ—Ä–∏–∫–∏:‚Å°
			{
				// ‚ö° ‚Å°‚Å¢‚Å£‚Å£–ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.‚Å°
				// ‚ö° ‚Å°‚Å¢‚Å£‚Å£–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (extends) –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤.‚Å°
			}
		}
	}
}
// ‚Å°‚Å¢‚Å£‚Å¢–ó–ê–î–ê–ß–ò –ü–û –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ò–Æ‚Å°
{
	// ‚Å°‚Å£‚Å£‚Å¢–¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–∏—Å—ã‚Å°
	{
		function slips(ms: number): Promise<void> {
			return new Promise<void>((resolve) => setTimeout(() => resolve(), ms));
		}
		let a: Promise<void> = slips(2000);
		console.log(a); // –í—ã–≤–æ–¥: Promise { <pending> } (–û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
		a.then(() => console.log("2 —Å–µ–∫—É–Ω–¥—ã —Å–ø—É—Å—Ç—è")); // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –≤—ã–≤–µ–¥–µ—Ç "2 —Å–µ–∫—É–Ω–¥—ã —Å–ø—É—Å—Ç—è"
		// ‚Å°‚Å£‚Å£‚Å¢–†–µ–∞–ª—å–Ω—ã–π —Å–º—ã—Å–ª –¥–∂–µ–Ω–µ—Ä–∏–∫–∞–º –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è, –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è:‚Å°
		function sleeps<T>(ms: number, value: T): Promise<T> {
			return new Promise((resolve) => setTimeout(() => resolve(value), ms));
		}
		sleeps(2000, "Hello").then(console.log); // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫: "Hello"
	}
}

export {}



// üî≥ ‚Å°‚Å¢‚Å£‚Å£–í–´–î–ê–ß–ê –ö–£–ü–Æ–† –ù–û–ú–ò–ù–ê–õ–û–ú, –ù–ê–õ–ò–ß–ò–ï–ú –ò –ò–• –ö–û–õ–õ–ò–ß–ï–°–¢–í–û‚Å°
{
	import { useState } from "react";
	import "./TestTask.css"

	// ‚Å°‚Å£‚Å¢‚Å¢–ü—Ä–æ—Å—Ç–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π):‚Å°
	// const nominals: number[] = [50, 100, 200, 500, 1000, 2000, 5000];
	// ‚Å°‚Å£‚Å¢‚Å¢–¢–æ—á–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è —Å as const (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø–æ—Ä—è–¥–æ–∫)‚Å°
	// const nominals = [50, 100, 200, 500, 1000, 2000, 5000] as const;
	// ‚Å°‚Å£‚Å¢‚Å¢–¢–∏–ø–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–∏–Ω–∞–ª–æ–≤(–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–µ–∑ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø–æ—Ä—è–¥–∫–∞)‚Å°
	type Nominal = "50" | "100" | "200" | "500" | "1000" | "2000" | "5000";
	// –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–∏–Ω–∞–ª—ã
	const allNominals: Nominal[] = ["50", "100", "200", "500", "1000", "2000", "5000"];
	/*
	* ATM
	* 
	* @param {number} amount - –í–≤–µ–¥—ë–Ω–Ω–∞—è —Å—É–º–º–∞
	* @param {number[]} nominals - –ù–æ–º–∏–Ω–∞–ª—ã –∫—É–ø—é—Ä
	* @return {string[]} Renurns format ["Nx3", "Nx4", "Nx1"] - –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∏ –Ω–æ–º–∏–Ω–∞–ª –∫—É–ø—é—Ä
	*/

	function atm(
		amount: string | number,
		nominals: string | number | number[] | string[],
		excludedNominals: string[] | number[] = [],
	): string[] {
		if (!amount) return []; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –µ—Å—Ç—å –ª–∏ —Å—É–º–º–∞
		// –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ amount(–¥–µ–Ω–µ–∂–Ω–∞—è —Å—É–º–º–∞) –∫ —á–∏—Å–ª—É
		const numericAmount = Number(amount);
		if (numericAmount < 0) return []; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É
		const result: string[] = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
		let remainingAmount = numericAmount;
		// –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ nominals(–º–∞—Å—Å–∏–≤ –Ω–æ–º–∏–Ω–∞–ª–∞ –∫—É–ø—é—Ä) –∫ –º–∞—Å—Å–∏–≤—É —á–∏—Å–µ–ª
		const numericNominals: number[] = Array.isArray(nominals)
			? nominals.map((n) => Number(n))
			: [Number(nominals)];
		// –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ excludedNominals(–º–∞—Å—Å–∏–≤ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –Ω–æ–º–∏–Ω–∞–ª–æ–≤) –∫ –º–∞—Å—Å–∏–≤—É —á–∏—Å–µ–ª
		const numericExcludedNominals: number[] = Array.isArray(excludedNominals)
			? excludedNominals.map((n) => Number(n))
			: [Number(excludedNominals)];
		// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–∏–Ω–∞–ª–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ, —á—Ç–æ –≤ excludedNominals(–º–∞—Å—Å–∏–≤ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –Ω–æ–º–∏–Ω–∞–ª–æ–≤))
		// –§–∏–ª—å—Ç—Ä—É–µ–º, —É—Å–ª–æ–≤–∏–µ –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –Ω–æ–º–∏–Ω–∞–ª–æ–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç, —Ç–æ –æ–Ω –∏—Å–∫–ª—é—á–∞–µ—Ç—Å—è –∏–∑ –º–∞—Å—Å–∏–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–∏–Ω–∞–ª–æ–≤
		// –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–∏–Ω–∞–ª–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
		const availableNominals = numericNominals
			.filter((n) => !numericExcludedNominals.includes(n))
			.sort((a, b) => a - b);
		// –ü–µ—Ä–µ–±–æ—Ä–∫–∞ –º–∞—Å—Å–∏–≤–∞ —Å —É—á—ë—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–∏–Ω–∞–ª–æ–≤
		// –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–∏–Ω–∞–ª–æ–≤ —Å –∫–æ–Ω—Ü–∞, —á—Ç–æ–±—ã –≤—ã–¥–∞–≤–∞—Ç—å –∫—É–ø—é—Ä—ã –±–æ–ª—å—à–∏–º–∏ –Ω–æ–º–∏–Ω–∞–ª–∞–º–∏
		for (let i = availableNominals.length - 1; i >= 0; i--) {
			const count = Math.floor(remainingAmount / availableNominals[i]); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø—é—Ä –ø–æ —Ç–µ–∫—É—â–µ–º—É –Ω–æ–º–∏–Ω–∞–ª—É
			// –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø—é—Ä –±–æ–ª—å—à–µ 0, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤
			if (remainingAmount < availableNominals[i]) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Å—É–º–º–∞ –º–µ–Ω—å—à–µ –Ω–æ–º–∏–Ω–∞–ª–∞
			if (count > 0) {
				result.push(`–ö—É–ø—é—Ä—ã: ${availableNominals[i]} —Ä—É–±–ª–µ–π –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ ${count} —à—Ç—É–∫–∏`); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø—é—Ä
				remainingAmount -= count * availableNominals[i]; // –£–º–µ–Ω—å—à–∞–µ–º —Å—É–º–º—É –Ω–∞ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø—é—Ä –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –º–∞—Å—Å–∏–≤
			}
		}
		return result;
	}

	const TestTask = () => {
		const [amount, setAmount] = useState<string | number>("");
		const [result, setResult] = useState<string[]>([]);
		const [excludedNominals, setExcludedNominals] = useState<Nominal[]>([]);

		const handleChangeAmount = (e: React.ChangeEvent<HTMLInputElement>) => {
			setAmount(+e.target.value);
		}
		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –Ω–æ–º–∏–Ω–∞–ª–∞ –∫—É–ø—é—Ä
		const handleToggleNominal = (nominal: Nominal) => {
			setExcludedNominals((prev) =>
				prev.includes(nominal) ? prev.filter((n) => n !== nominal) : [...prev, nominal],
			);
		};
		const handleSubmit = () => {
			const atmResult = atm(amount, allNominals, excludedNominals);
			setResult(atmResult);
		}
		const handleClear = () => {
			setAmount("");
			setResult([]);
			setExcludedNominals([]);
		}

		return (
			<>
				<div className="form">
					<span className="clean" title="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ" onClick={handleClear}>
						‚ùå
					</span>
					<input
						type="number"
						name="amount"
						value={amount}
						className="input__number"
						onChange={handleChangeAmount}
					/>
					<button className="button__choose" onClick={handleSubmit}>
						–í—ã–±—Ä–∞—Ç—å —Å—É–º–º—É
					</button>
					<div className="nominals-group">
						<label className="label__title">–ò—Å–∫–ª—é—á–∏—Ç—å –Ω–æ–º–∏–Ω–∞–ª—ã:</label>
						<div className="nominals-list">
							{allNominals.map((nominal) => (
								<label key={nominal} className="nominal-checkbox">
									<input
										type="checkbox"
										checked={excludedNominals.includes(nominal)}
										onChange={() => handleToggleNominal(nominal)}
									/>
									{nominal} —Ä—É–±.
								</label>
							))}
						</div>
					</div>
					<div className="out__block">
						<span className="out__text">–í—ã–¥–∞—á–∞ –∫—É–ø—é—Ä:</span>
						<ul className="out__list">
							{result.map((item, index) => (
								<li key={index} className="out__item">
									{item}
								</li>
							))}
						</ul>
					</div>
				</div>
			</>
		);
	}

	export default TestTask;
}
// üî≥ // ‚Å°‚Å£‚Å£‚Å°‚Å¢‚Å£‚Å£–ù–ê–ü–ò–°–ê–¢–¨ –ö–û–ú–ü–û–ù–ï–ù–¢ –ß–ê–°–´ –î–û–°–¢–ò–ì–®–ò–• –û–ü–†–ï–î–ï–õ–Å–ù–ù–û–ì–û –í–†–ï–ú–ï–ù–ò –ò –£–î–ê–õ–ï–ù–ò–Ø, –ü–û–°–õ–ï–î–ù–ï–ï –ó–ù–ê–ß–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò –ü–ï–†–ï–î–ê–¢–¨ –í –§–£–ù–ö–¶–ò–Æ LOGMETRIC, –ö–û–¢–û–†–ê–Ø –û–¢–ü–†–ê–í–ò–¢ –ï–ì–û –ù–ê –°–ï–†–í–ï–†.‚Å°
{
	function logMetric(data) {
		fetch("https://api.example.com/metrics", {
			method: "POST",
			body: JSON.stringify({ time: data }),
			headers: {
				"Content-Type": "application/json",
			},
		});
	}

	const Clock = () => {
		const [currentTime, setCurrentTime] = useState(new Date());
		const [shouldUnmount, setShouldUnmount] = useState(false);

		// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ 10 —Å–µ–∫—É–Ω–¥ –≤–ø–µ—Ä–µ–¥ –æ—Ç –º–æ–º–µ–Ω—Ç–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
		const targetTime = useRef(new Date());
		targetTime.current.setSeconds(targetTime.current.getSeconds() + 10);

		useEffect(() => {
			const timer = setInterval(() => {
				const now = new Date();
				setCurrentTime(now);
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
				if (now >= targetTime.current) {
					logMetric(now.toLocaleTimeString());
					setShouldUnmount(true);
				}
			}, 1000);
			return () => clearInterval(timer);
		}, []);

		return shouldUnmount ? null : <h1>{currentTime.toLocaleTimeString()}</h1>;
	};
}
// üî≥ ‚Å°‚Å£‚Å£‚Å°‚Å¢‚Å£‚Å°‚Å¢‚Å£‚Å£–ö–ê–°–¢–û–ú–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –í–ò–†–¢–£–ê–õ–ò–ó–ê–¶–ò–ò (–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–∞)‚Å°
{
	// import { useState, useRef, useEffect } from "react";
	const VirtualList = ({ items, itemHeight, containerHeight }) => {
		const [scrollTop, setScrollTop] = useState(0);
		const containerRef = useRef(null);
		const handleScroll = () => {
			setScrollTop(containerRef.current.scrollTop);
		};
		const totalHeight = items.length * itemHeight;
		const startIndex = Math.floor(scrollTop / itemHeight);
		const endIndex = Math.min(
			items.length - 1,
			Math.floor((scrollTop + containerHeight) / itemHeight),
		);
		const visibleItems = items.slice(startIndex, endIndex + 1);
		return (
			<div
				ref={containerRef}
				style={{
					height: `${containerHeight}px`,
					overflow: "auto",
					position: "relative",
				}}
				onScroll={handleScroll}
			>
				<div style={{ height: `${totalHeight}px` }}>
					<div
						style={{
							position: "absolute",
							top: `${startIndex * itemHeight}px`,
							width: "100%",
						}}
					>
						{visibleItems.map((item, index) => (
							<div
								key={startIndex + index}
								style={{
									height: `${itemHeight}px`,
									borderBottom: "1px solid #ddd",
									boxSizing: "border-box",
								}}
							>
								{item}
							</div>
						))}
					</div>
				</div>
			</div>
		);
	};
	// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
	const items = Array(10000)
		.fill()
		.map((_, i) => `Item ${i}`);
	const App = () => <VirtualList items={items} itemHeight={40} containerHeight={400} />;
}
// üî≥ 
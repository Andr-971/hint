
//! ПЕРЕЗАГРУЗКА СТРАНИЦЫ
window.location.reload();
//! ИММИТАЦИЯ СОБЫТИЯ
element.dispatchEvent(new Event("click"));
//! ПОЛУЧИТЬ РАЗМЕР ЭКРАНА
const size = window.matchMedia(`screen and (max-width: 530px)`)
console.log(size.matches); // true / false
//! СОБЫТИЯ МЫШИ:
//* click – происходит, когда кликнули на элемент левой кнопкой мыши (на устройствах с сенсорными экранами оно происходит при касании).
//* contextmenu – происходит, когда кликнули на элемент правой кнопкой мыши.
//* mouseover – когда мышь наводится на элемент
//* mouseout  - покидает элемент.
//* mousedown – когда нажали кнопку мыши на элементе.
//* mouseup – отпустили кнопку мыши на элементе.
//* mousemove – при движении мыши.
//! СОБЫТИЯ УКАЗАТЕЛЯ:
//* pointerdown - Вызывается, когда указатель принимает состояние активных кнопок.
//* pointerup - Вызывается, когда указатель теряет состояние активных кнопок.
//* pointermove - Вызывается, когда изменяются координаты указателя. Это событие также используется, если изменение состояния указателя нельзя сообщить с помощью других событий.
//* pointerover - Вызывается, когда указатель появляется в пределах элемента
//* pointerout - Вызывается по нескольким причинам, в том числе: когда указывающее устройство перемещается за пределы элемента (его теста попадания); запуск события pointerup для устройства, которое не поддерживает наведение "hover"; после запуска события pointercancel; когда перо покидает область обнаружения планшетом наведения указателя.
//* pointerenter - Вызывается, когда указатель перемещается в пределы элемента (его теста попадания) или одного из его потомков, в том числе в результате события pointerdown с устройства, которе не поддерживает наведение "hover"
//* pointerleave - Вызывается, когда указывающее устройство перемещается за пределы элемента (его теста попадания). Для устройств, подобных перу, это событие вызывается, когда перо покидает область обнаружения планшетом наведения указателя.
//* pointercancel - Браузер вызывает это событие, если приходит к выводу, что указывающее устройство больше не сможет генерировать события (например, если устройство деактивировано).
//* gotpointercapture - Вызывается, когда элемент получает захват указывающего устройства.
//* lostpointercapture - Запускается после того, как указывающее устройство потеряло захват.
//! СОБЫТИЯ НА ЭЛЕМЕНТАХ УПРАВЛЕНИЯ:
//* submit – пользователь отправил форму <form>.
//* focus – пользователь фокусируется на элементе, например нажимает на <input>.
//* Клавиатурные события:
//* keydown и keyup – когда пользователь нажимает / отпускает клавишу.
//* События документа:
//* DOMContentLoaded – когда HTML загружен и обработан, DOM документа полностью построен и доступен.
//* CSS events:
//* transitionend – когда CSS-анимация завершена.
//! ПОЛНЫЙ СПИСОК ОБРАБОТЧИКОВ СОБЫТИЙ. ВЫПОЛНЕНИЕ КОДА ОБРАБОТЧИКА ЗАПУСКАЕТСЯ, КОГДА ВЫПОЛНЕНО УСЛОВИЕ:
//* onabort – прерывание воспроизведения;
//* onafterprint – закончена печать;
//* onautocomplete – выполнено автозаполнение формы;
//* onautocompleteerror – ошибка при автозаполнении формы;
//* onbeforeprint – подготовка к печати;
//* onbeforeunload - документ выгружен;
//* onblur – потеря фокуса;
//* oncancel – отмена действия;
//* oncanplay - можно начать воспроизведение указанного медиа-файла;
//* oncanplaythrough - можно начать воспроизведение указанного медиа-файла без необходимости остановки для буферизации;
//* onchange – изменение значения;
//* onclick – клик на элементе;
//* onclose – закрытие чего-либо;
//* oncontextmenu – открытие контекстного меню;
//* oncopy – выполнено копирование;
//* oncuechange - изменение метки в элементе track;
//* oncut – выполнено вырезание контента;
//* ondblclick – двойной клик на элементе;
//* ondrag - перетаскивание элемента;
//* ondragend - перетаскивание элемента завершено;
//* ondragenter - элемент перетаскивается в допустимую целевую зону;
//* ondragexit – выход из режима перетаскивания;
//* ondragleave - элемент оставляет допустимую цель;
//* ondragover - элемент перетаскивается по допустимой целевой точке;
//* ondragstart – начало операции перетаскивания;
//* ondrop – перетаскиваемый элемент отпущен;
//* ondurationchange - изменение длины носителя;
//* onemptied – файл неожиданно стал недоступен;
//* onended – воспроизведение завершено;
//* onerror – произошла ошибка;
//* onfocus – установка фокуса на элементе;
//* onhashchange - изменение привязки части адреса;
//* oninput – начало ввода данных;
//* oninvalid – элемент поврежден;
//* onkeydown – нажата клавиша;
//* onkeypress - нажата клавиша и затем отпущена;
//* onkeyup – отпущена клавиша;
//* onload – элемент загружен;
//* onloadeddata – загружены данные файла;
//* onloadedmetadata – загружены метаданные файла;
//* onloadstart – начало загрузки элемента;
//* onmessage - появление сообщения;
//* onmousedown – нажата клавиша мыши;
//* onmouseenter – указатель мыши наведен на элемент;
//* onmouseleave – указатель мыши покинул элемент;
//* onmousemove - указатель мыши перемешен над элементом;
//* onmouseout - указатель мыши перемещается из элемента;
//* onmouseover - указатель мыши перемещается по элементу;
//* onmouseup - кнопка мыши отпускается над элементом;
//* onmousewheel (onwheel) – использовано колесико мыши;
//* onoffline – браузер запущен в оффлайн режиме;
//* ononline – браузер запущен в онлайн режиме;
//* onpagehide - пользователь переходит от страницы;
//* onpageshow - пользователь переходит на страницу;
//* onpaste – выполнена вставка контента;
//* onpause – приостановка воспроизведения;
//* onplay – начало воспроизведения;
//* onplaying – воспроизведения файла;
//* onpopstate - изменение истории окна;
//* onprogress – получение метаданных файла;
//* onratechange - изменение скорости воспроизведения;
//* onreset – выполнен сброс данных;
//* onresize – изменение размера элемента;
//* onscroll – прокрутка содержимого элемента;
//* onsearch – выполнен поиск;
//* onseeked - поиск закончился;
//* onseeking – поиск активен;
//* onselect – выбор некоторого текста или значения;
//* onshow – показ элемента;
//* onsort – выполнение сортировки;
//* onstalled - браузер не может получить мультимедийные данные по любой причине;
//* onstorage – обновлено веб-хранилище;
//* onsubmit – подтверждение отправки данных формы;
//* onsuspend – остановка извлечения метаданных;
//* ontimeupdate – изменение позиции (времени) воспроизведения файла, то есть перемотка файла;
//* ontoggle - пользователь открывает или закрывает элемент details;
//* onunload – загрузка выполнена, после чего произошло закрытие документа;
//* onvolumechange – громкость изменена;
//* onwaiting – ожидание восстановления воспроизведения.
//! СОБЫТИЯ НА СЕНСОРНОМ ЭКРАНЕ
//* touchstart - начало касания, пользователь нажал на экран;
//* touchmove -  пользователь двигает пальцем по экрану;
//* touchend  -  пользователь отпустил нажатие на экран;
//* touchcancel  -  отмена касания. Это событие срабатывает, если пользователь заходит за край страницы, переворачивает экран, сворачивает браузер и так далее.
//* Пальцы на экране:
{
	//* target
	//? touches: Список информации для каждого пальца, в данный момент прикасающегося к экрану.
	//? targetTouches: Как и касания, но отфильтровано только касание пальцем, которое началось в пределах одного узла
	//? changedTouches: Список информации для каждого пальца, задействованного в мероприятии
	//* Чтобы лучше понять, что может быть в этих списках, давайте быстро рассмотрим несколько примеров. Они различаются в соответствии со следующими правилами:
	//* Когда я опускаю палец, во всех трёх списках будет одна и та же информация. Она будет в changedTouches потому, что нажатие на палец вызвало это событие
	//* Когда я опускаю второй палец, touches будет содержать два элемента, по одному для каждого пальца. targetTouches будет содержать два элемента только в том случае, если палец был помещён в тот же узел, что и первый палец. changedTouches будет содержать информацию, связанную со вторым пальцем, потому что именно он вызвал событие
	//* Если я одновременно нажму на два пальца, в changedTouches можно будет сохранить два элемента, по одному для каждого пальца
	//* Если я пошевелю пальцами, изменится только список changedTouches и он будет содержать информацию о том, сколько пальцев пошевелилось (хотя бы один).
	//* Когда я подниму палец, он будет удалён из touches targetTouches и появится в changedTouches , так как именно он вызвал это событие
	//* Если я удалю последний палец, touches и targetTouches останутся пустыми, а changedTouches будет содержать информацию о последнем пальце
}
//! ОБРАБОТЧИК СОБЫТИЙ
element.addEventListener("click", function (event) {
	console.log("Произошло событие", event.type);
}, { capture: bool, passive: bool, once: bool });
//* capture — включает или выключает захват события элементом, на который установлен обработчик. Это значит, что событие сначала сработает на элементе и только потом сработает на всех вложенных элементах. Принимает значение true или false - по умолчанию
//* passive – говорит о том, что внутри handler никогда не будет вызвана функция false - по умолчанию
//* once – включает автоматическую отписку от события после первого срабатывания. false - по умолчанию
//TODO СОБЫТИЕ                 ИНТЕРФЕЙС                 ЦЕЛИ                 ОПИСАНИЕ
//? "DOMContentLoaded"           Event                  Document           Запускается в объекте Document. Это происходит, когда
//?                                                                         все загружено и проанализировано!
//? "afterprint"                 Event                  Window             Это срабатывает в объекте Window после того,
//?                                                                         как пользователь печатает.
//? "beforeprint"                Event                  Window             Запускается в объекте Window перед печатью
//? "beforematch"                Event                  Elements           Срабатывает на элементах с hidden=until - атрибут,
//?                                                                         найденный до того, как они будут обнаружены.
//? "beforetoggle"               ToggleEvent            Elements           Срабатывает для элементов с атрибутом 
//?                                                                          popover, когда они переключаются между 
//?                                                                          показом и скрытием.
//? "beforeunload"               BeforeUnloadEvent      Window             Запускается в объекте Window, когда
//?                                                                         страница собирается быть выгружена. Обычно 
//?                                                                         это используется, когда мы хотим отобразить 
//?                                                                         приглашение перед тем, как пользователь 
//?                                                                         покинет страницу - например, “Вы уверены, 
//?                                                                         что хотите уйти?”.
//? "blur"                       Event                  Window, elements   Запускается в элементах управления, когда 
//?                                                                         они перестают быть в фокусе. Например, 
//?                                                                         когда пользователь удаляется от <ввода>.
//? "cancel"                     Event                  dialog elements,   Срабатывает на элементах диалогового окна,
//?                                                     input elements      когда они отменяются пользователем. 
//?                                                                         (например, нажатием клавиши Escape), или на 
//?                                                                         элементах ввода в состоянии файла, когда 
//?                                                                         пользователь не изменяет их выбор.
//? "change"                     Event                  Form controls      Срабатывает в элементах управления, когда 
//?                                                                         пользователь фиксирует изменение значения 
//?                                                                         (см. Также Событие ввода).
//? "click"                      PointerEvent           Elements           Обычно событие мыши; также синтетически 
//?                                                                         запускается в элементе перед запуском его 
//?                                                                         режима активации, когда элемент 
//?                                                                         активируется с устройства ввода без 
//?                                                                         указателя (например, клавиатуры).
//? "close"                      Event                  dialog elements    Запускается в элементах диалогового окна, 
//?                                                                         когда они закрыты.
//? "connect"                    MessageEvent     SharedWorkerGlobalScope  Запускается в глобальной области действия 
//?                                                                         общего рабочего приложения при 
//?                                                                         подключении нового клиента
//? "contextlost"                Event               canvas elements,      Срабатывает при потере соответствующего 
//?                                                OffscreenCanvas objects  CanvasRenderingContext2D или 
//?                                                                         OffscreenCanvasRenderingContext2D.
//? "contextrestored"            Event				canvas elements,	   Срабатывает, когда соответствующий 	
//?												OffscreenCanvas objects		CanvasRenderingContext2D или 
//?																			OffscreenCanvasRenderingContext2D 
//?																			восстанавливается после потери
//?	"currententrychange" NavigationCurrentEntryChangeEvent Navigation	   Срабатывает при изменении 		 
//?																			navigation.currentEntry
//?	"dispose"					 Event			 NavigationHistoryEntry	   Срабатывает, когда запись истории сеанса, 		
//?																			соответствующая NavigationHistoryEntry, была 
//?																			окончательно удалена из истории сеанса и 
//?																			больше не может быть перемещена в
//? "error"				Event or ErrorEvent  Global scope objects, Worker  Срабатывает при возникновении 	 
//?											objects, elements, networking-  непредвиденных ошибок (например, сетевых 
//?											 related objects				ошибок, ошибок скрипта, ошибок 
//?																			декодирования).
//? "focus"						 Event			Window, elements		   Срабатывает на узлах, получающих фокус		
//?	"formdata"				FormDataEvent		form elements			   Запускается в элементе формы, когда он 
//?																			создает список записей.
//?	"hashchange"			HashChangeEvent			Window				   Запускается в окне при изменении фрагмента 			
//?																			URL-адреса документа.
//?	"input"						Event				Elements			   Запускается, когда пользователь изменяет 
//?																			содержимое элемента contenteditable или 
//?																			значение элемента управления form. 
//?																			Смотрите также событие изменения 
//?																			элементов управления form.
//?	"invalid"					Event				Form controls		   Запускается в элементах управления во время 
//?																			проверки формы, если они не удовлетворяют
//?																			своим ограничениям.
//?	"languagechange"			Event			Global scope objects	   Запускается в объекте global scope при 
//?																			изменении предпочитаемых пользователем 
//?																			языков
//? "load"						Event			Window, elements		   Запускается в окне, когда документ завершает 
//?																			загрузку; Запускается в элементе, 
//?																			содержащем ресурс (например, img, embed), 
//?																			когда его ресурс завершает загрузку.
//?	"message"					MessageEvent	Window, EventSource,	   Срабатывает на объекте, когда он получает 
//?																			сообщение.
//?	"messageerror"				MessageEvent	Window, MessagePort		   Срабатывает на объекте, когда он получает 
//?																			сообщение, которое не может быть 
//?																			десериализовано.
//?	"navigate"					NavigateEvent		Navigation			   Запускается до того, как навигируемый объект 
//?																			выполнит навигацию, перезагрузку, обход или 
//?																			иным образом изменит свой URL-адрес.
//?	"navigateerror"				ErrorEvent			Navigation			   Срабатывает, когда навигация не завершается 
//?																			успешно.
//?	"navigatesuccess"			Event				Navigation			   Срабатывает при успешном завершении 
//?																			навигации.
//?	"offline"					Event			Global scope objects	   Запускается в объекте глобальной области 
//?																			видимости при сбое сетевых подключений.
//?	"online"					Event			Global scope objects	   Запускается в объекте глобальной области 
//?																			видимости, когда возвращаются сетевые 
//?																			подключения.
//?	"open"						Event				EventSource			   Запускается в объектах EventSource при 
//?																			установлении соединения.
//?	"pagehide"				PageTransitionEvent		Window				   Запускается в окне, когда запись истории 
//?																			сеансов страницы перестает быть активной.
//?	"pageshow"				PageTransitionEvent		Window				   Запускается в окне, когда запись истории 	
//?																			сеансов страницы становится активной 
//?																			записью.
//?	"pointercancel"				PointerEvent	Elements and Text nodes	   Запускается на исходном узле, когда 	
//?																			пользователь пытается инициировать 
//?																			операцию перетаскивания.
//?	"popstate"					PopStateEvent		Window				   Срабатывает в окне при некоторых случаях 
//?																			обхода истории сеансов.
//?	"readystatechange"			Event				Document			   Запускается в Документе, когда он завершает
//?																			синтаксический анализ, и снова, когда все его 
//?																			вспомогательные ресурсы завершают 
//?																			загрузку.
//?	"rejectionhandled"	  PromiseRejectionEvent		Global scope objects   Запускается в объектах глобальной области 	
//?																			видимости, когда обрабатывается ранее 
//?																			необработанное отклонение обещания.
//?	"reset"						Event			  form elements			   Срабатывает в элементе формы при его
//?																			сбросе.
//?	"select"					Event			Form controls			   Запускается в элементах управления формы 
//?																			при настройке их выбора текста. Это может
//?																			быть результатом вызова API или от 
//?																			пользователя.
//?	"storage"				StorageEvent			Window				   Срабатывает при событии Window при 
//?																			изменении соответствующих областей 
//?																			хранения localStorage или sessionStorage.
//?	"submit"				SubmitEvent				form elements		   Запускается в элементе формы при его 
//?																			отправке.
//?	"toggle"		Event or ToggleEvent	details and popover elements   Срабатывает на элементах details, когда они 	
//?																			открываются или закрываются; Срабатывает
//?																			на элементах с атрибутом popover, когда они 
//?																			переключаются между показом и скрытием.
//?	"unhandledrejection"	PromiseRejectionEvent Global scope objects	   Срабатывает на объектах глобальной области 	
//?																			видимости, когда отклонение обещания 
//?																			остается необработанным.
//? "unload"					Event				Window				   Запускается в объекте Window при выгрузке 
//?																			страницы.
//?	"visibilitychange"			Event				Document			   Запускается в объекте Document, когда 
//?																			страница становится видимой или скрытой 
//?																			для пользователя.
//?
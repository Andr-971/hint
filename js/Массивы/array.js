//! –ö–õ–û–ù–ò–†–û–í–ê–ù–ò–ï –ú–ù–û–ì–û–ú–ï–†–ù–û–ì–û –ú–ê–°–°–ò–í–ê –û–ë–™–ï–ö–¢–û–í
{
	structuredClone(array); //* –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–ª—É–±–æ–∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
	// üî≥ ‚Å°‚Å¢‚Å£‚Å£–§–£–ù–ö–¶–ò–Ø –ì–õ–£–ë–û–ö–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø‚Å°
	{
		function deepCopy(obj, hash = new WeakMap()) {
			// –ü—Ä–∏–º–∏—Ç–∏–≤—ã –∏ null/undefined
			if (obj === null || typeof obj !== "object") {
				return obj;
			}
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
			if (hash.has(obj)) {
				return hash.get(obj);
			}
			// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
			if (obj instanceof Date) {
				return new Date(obj);
			}
			if (obj instanceof RegExp) {
				return new RegExp(obj);
			}
			// –ú–∞—Å—Å–∏–≤—ã
			if (Array.isArray(obj)) {
				const copy = [];
				hash.set(obj, copy);
				for (let i = 0; i < obj.length; i++) {
					copy[i] = deepCopy(obj[i], hash);
				}
				return copy;
			}
			// –û–±—ä–µ–∫—Ç—ã
			const copy = Object.create(Object.getPrototypeOf(obj));
			hash.set(obj, copy);
			for (const key in obj) {
				if (obj.hasOwnProperty(key)) {
					copy[key] = deepCopy(obj[key], hash);
				}
			}
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
			if (typeof obj === "function") {
				return obj.bind({});
			}
			// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª—å–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
			const symbolKeys = Object.getOwnPropertySymbols(obj);
			for (const symKey of symbolKeys) {
				copy[symKey] = deepCopy(obj[symKey], hash);
			}
			return copy;
		}
	}
}

//! –ö–û–õ–õ–ï–ö–¶–ò–Æ html –í –ú–ê–°–°–ò–í
Array.from(–∫–æ–ª–ª–µ–∫—Ü–∏—è - —ç–ª–µ–º–µ–Ω—Ç–æ–≤);
[...(–∫–æ–ª–ª–µ–∫—Ü–∏—è - —ç–ª–µ–º–µ–Ω—Ç–æ–≤)];
//! –ü–†–û–í–ï–†–ò–¢–¨ –ú–ê–°–°–ò–í –ò–õ–ò –ù–ï–¢
Array.isArray(–º–∞—Å—Å–∏–≤) // true/false
//! –ú–ï–¢–û–î–´ –ú–ê–°–°–ò–í–û–í
{
	console.log(Array.isArray(arr)); //* –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true/false –º–∞—Å—Å–∏–≤ –∏–ª–∏ –Ω–µ—Ç
	join(); //* –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏, —Å–æ—Å—Ç–æ—è—â–µ–π –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –¥—Ä—É–≥–∏–º —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º.
	unshift(); //* –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
	array.unshift(element1, elementN);
	push(); //* –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞
	array.push(element1, elementN);
	shift(); //* —É–¥–∞–ª—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
	array.shift();
	pop(); //* –∏–∑–≤–ª–µ–∫–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–Ω—Ü–∞ –º–∞—Å—Å–∏–≤–∞
	array.pop();
	splice(); //* –¥–æ–±–∞–≤–ª—è–µ—Ç, —É–¥–∞–ª—è–µ—Ç –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –ª—é–±–æ–π —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ —É–¥–∞–ª—ë–Ω–Ω—ã–µ
	array.splice(start, [deleteCount, item1, item2]);
	//TODO start ‚Äî —ç—Ç–æ –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã —Ö–æ—Ç–∏–º –Ω–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è. –î–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∫–æ–Ω—Ü–∞ –º–∞—Å—Å–∏–≤–∞.
	//TODO deleteCount ‚Äî —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ö–æ—Ç–∏–º —É–¥–∞–ª–∏—Ç—å –∏–∑ –º–∞—Å—Å–∏–≤–∞. –ï—Å–ª–∏ —É–∫–∞–∑–∞—Ç—å 0, —Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è. –ê –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å –Ω–∏–∫–∞–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, —Ç–æ –º–µ—Ç–æ–¥ —É–¥–∞–ª–∏—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ ‚Äî —Ç–æ–≥–æ, —á—Ç–æ –º—ã –∑–∞–ø–∏—Å–∞–ª–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ start.
	//TODO item1, item2, ‚Ä¶ ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞. –≠—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.
	slice(); //* –∫–æ–ø–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞  –∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
	array.slice([start, end]);
	//TODO start ‚Äî —ç—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å, —Ç–æ –≤—Å—ë –Ω–∞—á–Ω—ë—Ç—Å—è —Å –Ω—É–ª–µ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞.
	//TODO end ‚Äî —ç—Ç–æ –∫–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å, —Ç–æ —Å–∫–æ–ø–∏—Ä—É—é—Ç—Å—è –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–æ –∫–æ–Ω—Ü–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞.
	concat(); //* –∫–æ–ø–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤, –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤–æ–≤ –≤ –æ–¥–∏–Ω
	array.concat(arg1, arg2, argN);
	filter(); //* –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø–æ —É—Å–ª–æ–≤–∏—é, –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –∏–∑ –Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —É—Å–ª–æ–≤–∏—é.
	const animals = ["üê∂", "üê±", "ü¶Å", "üêØ", "üê∑"];
	animals.filter((animal) => animal === "ü¶Å" || animal === "üêØ");
	map(); //* –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ
	animals.map((animal) => `${animal}üíâ`);
	forEach(); //* –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç, –¢–æ –µ—Å—Ç—å –≤—ã –º–æ–∂–µ—Ç–µ —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –∫–∞–∂–¥—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –µ–≥–æ –≤ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤.
	const vehicles = ["üöó", "üöï", "üöô", "üöå", "üöé", "üèçÔ∏è", "üö≤", "üöú", "‚úàÔ∏è", "üö¢"];
	vehicles.forEach((vehicle) => console.log(vehicle));
	every(); //* –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –∑–∞–¥–∞–Ω–Ω–æ–º—É —É—Å–ª–æ–≤–∏—é, –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º—É –º–∞—Å—Å–∏–≤—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ true, –µ—Å–ª–∏ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—é. –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ‚Äî –º–µ—Ç–æ–¥ every() –≤–µ—Ä–Ω—ë—Ç false
	array.every(callback);
	some(); //* –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É—Å–ª–æ–≤–∏–µ —Ö–æ—Ç—è –±—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞, –ø–æ—Å–ª–µ –ø–µ—Ä–µ–±–æ—Ä–∞ –º–∞—Å—Å–∏–≤–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—é. –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç ‚Äî –º–µ—Ç–æ–¥ –≤–µ—Ä–Ω—ë—Ç false
	array.some(callback);
	indexOf(); //* –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –∏—Å–∫–æ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: –∏—Å–∫–æ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –∏–Ω–¥–µ–∫—Å, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –ø–æ–∏—Å–∫. –ï—Å–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Ç–æ indexOf –≤–µ—Ä–Ω—ë—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –∏–Ω–¥–µ–∫—Å. –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ –±—É–¥–µ—Ç, –º–µ—Ç–æ–¥ –≤–µ—Ä–Ω—ë—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º -1
	array.indexOf(searchElement, [fromIndex]);
	findIndex(callback(el)); //* –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–µ–≥–æ —É—Å–ª–æ–≤–∏—è–º –∑–∞–¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç -1, –µ—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏.
	//TODO searchElement ‚Äî —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Ö–æ—Ç–∏–º –Ω–∞–π—Ç–∏ –≤ –º–∞—Å—Å–∏–≤–µ.
	//TODO fromIndex ‚Äî –Ω–æ–º–µ—Ä –∏–Ω–¥–µ–∫—Å–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫. –ï—Å–ª–∏ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ —É–∫–∞–∑–∞—Ç—å, —Ç–æ –ø–æ–∏—Å–∫ –Ω–∞—á–Ω—ë—Ç—Å—è —Å –Ω–∞—á–∞–ª–∞ –º–∞—Å—Å–∏–≤–∞.
	lastIndexOf(); //* –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –∏—Å–∫–æ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ —Å –∫–æ–Ω—Ü–∞ –º–∞—Å—Å–∏–≤–∞
	array.lastIndexOf(searchElement, [fromIndex]);
	includes(); //* –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ true –∏–ª–∏ false.
	array.includes(searchElement, [fromIndex]);
	find(); //* –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ, –∫–æ—Ç–æ—Ä—ã–π —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—é –ø–æ–∏—Å–∫–∞, –ï—Å–ª–∏ –Ω—É–∂–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω, —Ç–æ find() –µ–≥–æ –≤–µ—Ä–Ω—ë—Ç, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –≤–µ—Ä–Ω—ë—Ç—Å—è undefined
	array.find(callback);
	sort(); //* –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤. –¢–æ –µ—Å—Ç—å –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ –∏–∑–º–µ–Ω–∏—Ç—Å—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ ‚Äî –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏. –ï—Å–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ –±—É–¥—É—Ç —á–∏—Å–ª–∞, —Ç–æ –º–µ—Ç–æ–¥ sort() –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ö –≤ —Å—Ç—Ä–æ–∫–∏ –∏ –ø–æ—Å–ª–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –∫–æ–¥–∞–º —Å–∏–º–≤–æ–ª–æ–≤ Unicode.
	const foods = ["üçï", "üçî", "üå≠", "üçü", "ü•ó", "üç£", "üçù", "üåÆ", "ü•™", "üç∞"];
	foods.sort();
	foods.sort(callback);
	reverse(); //* —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤, –º–µ–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
	array.reverse();
	reduce(); //* —Å–≤—ë—Ä—Ç—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –≤ –µ–¥–∏–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –æ–±—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, —Å—É–º–º–∞ —á–∏—Å–µ–ª –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.
	const numbers = [1, 2, 3, 4, 5];
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ reduce() –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Å—É–º–º—ã –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
	const summa = numbers.reduce((accumulator, currentValue) => {
		// –ù–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (currentValue) –∫ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—É (accumulator)
		return accumulator + currentValue;
	}, 0); // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ 0

	console.log(sum); // 15
	//TODO –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
	//TODO –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞ –∏ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é.
	//TODO –ü–æ–ª—É—á–∞–µ—Ç—Å—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–æ–≤—ã–º –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.
	//TODO –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞ –∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–º—É –Ω–∞—á–∞–ª—å–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é.
	//TODO –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –ø–æ–∫–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥—ë—Ç –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º.
}
//! –†–ê–ó–ë–ò–í–ö–ê –ù–ê N –ú–ê–°–°–ò–í–û–í
//-------------------------------------------
{
	function* chunks(arr, n) {
		for (let i = 0; i < arr.length; i += n) {
			yield arr.slice(i, i + n);
		}
	}
	const arrRes = [...chunks(array, 4)];
	console.log(arrRes);
	//------------------------------------------
	const perChunk = 4; // –ü—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ –∫—É—Å–æ–∫
	const inputArray = array; // –ú–∞—Å—Å–∏–≤ –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–±–∏—Ç—å
	const result = inputArray.reduce((resultArray, item, index) => {
		const chunkIndex = Math.floor(index / perChunk);

		if (!resultArray[chunkIndex]) {
			resultArray[chunkIndex] = []; // –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∫—É—Å–æ–∫
		}
		resultArray[chunkIndex].push(item);
		return resultArray;
	}, []);
	console.log(result); // result: [['a','b'], ['c','d'], ['e']]
	//-----------------------------------------------
	function chunkAr(arr, len) {
		var chunks = [],
			i = 0,
			n = arr.length;
		while (i < n) {
			chunks.push(arr.slice(i, (i += len)));
		}
		return chunks;
	}
	console.log(chunkAr(array, 4));
}
//! –î–û–ë–ê–í–õ–Ø–¢–¨ –í –ú–ê–°–°–ò–í –û–ë–™–ï–ö–¢–´ –ò–ì–ù–û–†–ò–†–£–Ø –£–ñ–ï –ò–ú–ï–Æ–©–ò–ï–°–Ø
let newParams;
if (state.filterValue.findIndex((item) => item.id === params.id) === -1) {
	newParams = params;
	return (state.filterValue = [...state.filterValue, newParams]);
} else {
	return state.filterValue;
}
//! –§–ò–õ–¨–¢–†–û–í–ê–¢–¨ –ú–ê–°–°–ò–í
let –Ω–æ–≤—ã–πM–∞—Å—Å–∏–≤ = –º–∞—Å—Å–∏–≤.filter(function (—ç–ª–µ–º–µ–Ω—Ç, –∏–Ω–¥–µ–∫—Å, –º–∞—Å—Å–∏–≤) {
	–∫–æ–¥;
	return true || false; // true —á—Ç–æ –ø–æ–ø–∞–¥—ë—Ç –≤ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
});
//--------------
//! –§–ò–õ–¨–¢–†–û–í–ê–¢–¨ –û–î–ò–ù–ê–ö–û–í–´–ï –û–ë–™–ï–ö–¢–´ –í –ú–ê–°–°–ò–í–ï
{
    //* 1. –Ø–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –ø–æ–ª–Ω–æ–º –∑–Ω–∞–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ—Å—è –≤ –æ–±—ä–µ–∫—Ç–µ –º–∞—Å—Å–∏–≤–∞.
    list = list.reduce((r, i) => (!r.some((j) => i.x === j.x && i.y === j.y) ? [...r, i] : r), []);
    //* –ó–¥–µ—Å—å —É –Ω–∞—Å –µ—Å—Ç—å —Å—Ç—Ä–æ–≥–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {x: N, y: M}. –ò [{x:1, y:2}, {x:1, y:2, z:3}] –±—É–¥—É—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –ø–æ [{x:1, y:2}].

    //* 2. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, JSON.stringify(). –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–±—ã—Ö —Å–≤–æ–π—Å—Ç–≤.
    list = list.reduce(
        (r, i) => (!r.some((j) => JSON.stringify(i) === JSON.stringify(j)) ? [...r, i] : r),
        [],
    );
    // –≠—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥ –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –ø–æ—Ä—è–¥–æ–∫ —Å–≤–æ–π—Å—Ç–≤, –ø–æ—ç—Ç–æ–º—É [{x:1, y:2}, {y:2, x:1}] –Ω–µ –±—É–¥–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω.

    //* 3. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, Object.keys(). –ü–æ—Ä—è–¥–æ–∫ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è.

    list = list.reduce(
        (r, i) => (!r.some((j) => !Object.keys(i).some((k) => i[k] !== j[k])) ? [...r, i] : r),
        [],
    );
    // –≠—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥ –∏–º–µ–µ—Ç –µ—â–µ –æ–¥–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, [{x:1, y:2}, {x:1}] –±—É–¥–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—á–µ–≤–∏–¥–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É.

    //* 4. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, Object.keys() + .length.
    list = list.reduce(
        (r, i) =>
            !r.some(
                (j) =>
                    Object.keys(i).length === Object.keys(j).length &&
                    !Object.keys(i).some((k) => i[k] !== j[k]),
            )
                ? [...r, i]
                : r,
        [],
	);
	function incluseArray(array) {
		return array.reduce(
			(r, i) =>
				!r.some(
					(j) =>
						Object.keys(i).length === Object.keys(j).length &&
						!Object.keys(i).some((k) => i[k] !== j[k]),
				)
					? [...r, i]
					: r,
			[],
		);
	}
    // –ü—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–¥—Ö–æ–¥–µ –æ–±—ä–µ–∫—Ç—ã —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–ª—é—á–µ–π, –ø–æ —Å–∞–º–∏–º –∫–ª—é—á–∞–º –∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º –∫–ª—é—á–µ–π.
}
//! –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –ú–ê–°–°–ò–í–ê
const itemArray = Array(5).fill(1);
// Array(5) –ú–∞—Å—Å–∏–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–Ω–¥–µ–∫—Å–æ–≤
// –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —á–µ–º –∑–∞–ø–æ–ª–Ω—è—Ç—å
// –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å –∫–∞–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏
// –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ –∫–∞–∫—É—é –ø–æ–∑–∏—Ü–∏—é
console.log(itemArray); // [1, 1, 1, 1, 1]
//! –ú–ï–¢–û–î–´ –û–ë–•–û–î–ê –ú–ê–°–°–ò–í–ê
{
    //* –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π
    var i = testData.length;
    while (i--) {
        console.log(testData[i]);
    }
    //* for
    var a = ["a", "b", "c"];
    var index;
    for (index = 0; index < a.length; ++index) {
        console.log(a[index]);
    }
    //* for in
    // a - —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
    // –í—ã–ø–æ–ª–Ω–∏—Ç –≤—Å–µ–≥–æ 3 –∏—Ç–µ—Ä–∞—Ü–∏–∏
    var a = [];
    a[0] = "a";
    a[10] = "b";
    a[10000] = "c";
    for (var key in a) {
        if (a.hasOwnProperty(key) && /^0$|^[1-9]\d*$/.test(key) && key <= 4294967294) {
            console.log(a[key]);
        }
    }
    //* for of
    var val;
    var a = ["a", "b", "c"];
    for (val of a) {
        console.log(val);
    }
    //* forEach –ø–µ—Ä–µ–±–æ—Ä –Ω–µ —á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–ø–µ—Ç
    //* forEach –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã Array.prototype —Ç–∞–∫–∂–µ –ø—Ä–∏–º–µ–Ω–∏–º—ã –∫ –º–∞—Å—Å–∏–≤–æ–ø–æ–¥–æ–±–Ω—ã–º –æ–±—ä–µ–∫—Ç–∞–º.
    //* Array.prototype.slice –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –Ω–∞–≥–ª—è–¥–Ω—ã–π –º–µ—Ç–æ–¥ Array.from.
    var a = ["a", "b", "c"];
    a.forEach(function (entry) {
        console.log(entry);
    });
    //* filter ‚Äî —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, –≤–∫–ª—é—á–∞—é—â–∏–π —Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–ª–±–µ–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true.
    function isBigEnough(value) {
        return value >= 10;
    }
    let filtered = [12, 5, 8, 130, 44].filter(isBigEnough);
    // –º–∞—Å—Å–∏–≤ filtered —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç [12, 130, 44]
    //* map ‚Äî —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –≤–æ–∑—Ä–∞—â–∞–µ–º—ã—Ö –∫–æ–ª–±–µ–∫–æ–º.
    const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];
    const squares = nums.map(function (num) {
        return num * num;
    });
    console.log(squares); // [1, 4, 9, 16, 25, 36, 49, 64, 81]
    //* reduce ‚Äî —Å–≤–æ–¥–∏—Ç –º–∞—Å—Å–∏–≤ –∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é, –ø—Ä–∏–º–µ–Ω—è—è –∫–æ–ª–±–µ–∫ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞, –Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–≥–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—É–º–º—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ –∏ –¥—Ä—É–≥–∏—Ö –∏—Ç–æ–≥–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π).
    const numBer = [1, 2, 3, 4, 5, 6, 7, 8];

    const sum = numBer.reduce(function (currentSum, currentNumber) {
        return currentSum + currentNumber;
    }, 0);
    // 36
    //* reduceRight ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ reduce, –Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
}